{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u7ae5\u53d1\u53d1\u7684\u5927\u6a21\u578b\u5b66\u4e60\u4e4b\u65c5","text":"<p>\u4f5c\u8005\uff1aTong Tong</p> <p>B\u7ad9\u9996\u9875\uff1aDouble\u7ae5\u53d1\u53d1</p> <p>License\uff1aMIT License\uff0c\u8bf7\u4e25\u683c\u9075\u5b88\u9879\u76ee\u534f\u8bae\u89c4\u8303\uff0c\u5426\u5219\u4fdd\u7559\u8ffd\u7a76\u8d23\u4efb\u7684\u6743\u5229\u3002</p>"},{"location":"#1","title":"1. \u9879\u76ee\u7b80\u4ecb","text":"<p>\u7ae5\u53d1\u53d1\u5b66\u4e60\u5927\u6a21\u578b\u7684\u8fc7\u7a0b\u8bb0\u5f55\uff0c\u4f1a\u4e0d\u65ad\u66f4\u65b0\uff0c\u5305\u542b\u4ee3\u7801\u3001\u90e8\u5206jupyter notebook\u8bb2\u7a3f\u7b49\u3002</p>"},{"location":"#2","title":"2. \u9879\u76ee\u7ed3\u6784","text":"Text Only<pre><code>- README.md \u8bf4\u660e\u6587\u6863\n- bilibili \u5b58\u5728B\u7ad9\u89c6\u9891\u5bf9\u5e94\u7684jupyter\u8bb2\u7a3f\n  - rope.ipynb \u65cb\u8f6c\u4f4d\u7f6e\u7f16\u7801\u8bb2\u7a3f\n  - func_calling.ipynb \u51fd\u6570\u8c03\u7528\u8bb2\u7a3f\n- src \u6e90\u4ee3\u7801\n  - mcp \u6d4b\u8bd5MCP\u534f\u8bae\n  - mymanus \u4ece\u96f6\u5f00\u59cb\u6784\u5efamanus\uff01\n- ref_code \u53c2\u8003\u4ee3\u7801\n- fc_test.py \u6d4b\u8bd5\u5927\u6a21\u578bfunction calling\n- main.py \u6d4b\u8bd5mymanus\n</code></pre>"},{"location":"#3","title":"3. \u5982\u4f55\u8fd0\u884c\u4ee3\u7801\uff1f","text":"<ol> <li> <p>\u5b89\u88c5uv\uff1auv\u662f\u4e00\u4e2a\u66f4\u52a0\u5148\u8fdb\u7684python\u5305\u7ba1\u7406\u5de5\u5177\uff0c\u5b89\u88c5\u65b9\u6cd5\u89c1uv\u5b98\u7f51</p> </li> <li> <p>\u4ecegithub\u4e0agit clone\u672c\u9879\u76ee</p> </li> </ol> Bash<pre><code>git clone https://github.com/TongTong313/LLM-TT.git\n</code></pre> <ol> <li>\u5728\u6839\u76ee\u5f55\u4e0b\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\uff0c\u6709\u4e86uv\u540e\uff0c\u5b89\u88c5\u4f9d\u8d56\u5c31\u975e\u5e38\u7b80\u5355\u4e86\uff0c\u4f60\u751a\u81f3\u53ef\u4ee5\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e00\u6b65\u5230\u6700\u540e\u4e00\u6b65\u8fd0\u884c\u4ee3\u7801\uff0c\u5b83\u4f1a\u81ea\u52a8\u7ed9\u4f60\u88c5\u597d~</li> </ol> Bash<pre><code>uv sync\n</code></pre> <ol> <li>\u4e3a\u4e86\u4fdd\u8bc1\u5305\u7684\u5f15\u7528\u53ef\u4ee5\u4e0d\u6d89\u53ca\u76f8\u5bf9\u8def\u5f84\u5565\u7684\uff0c\u4f9d\u6258pyproject.toml\u6587\u4ef6\uff0c\u628a\u6211\u4eec\u8fd9\u4e2a\u9879\u76ee\u4f5c\u4e3apackage\u5b89\u88c5\u4e00\u4e0b</li> </ol> Bash<pre><code>uv pip install -e .\n</code></pre> <ol> <li>\u8fd0\u884c\u4ee3\u7801\uff0c\u8fd9\u4e00\u6b65\u4f1a\u81ea\u52a8\u5b89\u88c5\u6240\u6709\u4f9d\u8d56\uff0c\u867d\u7136\u5982\u6b64\u4f46\u4f60\u4e0d\u80fd\u8df3\u8fc7\u7b2c4\u6b65\uff0c\u8fd9\u91cc\u5c31\u4e3e\u4e00\u4e2a\u4f8b\u5b50\uff0c\u4e0d\u540c\u7684\u9879\u76ee\u5f53\u7136\u8981\u8fd0\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u54c8\u54c8~</li> </ol> Bash<pre><code># \u8fd0\u884cmanus\u4ee3\u7801\uff0c\u7b49\u4ef7\u4e8epython main.py\nuv run main.py  \n</code></pre> <ol> <li>\u5982\u679c\u9047\u5230\u4e0d\u80fd\u8fd0\u884c\u7684\u60c5\u51b5\uff0c\u7528\u4e0b\u9762\u7684\u547d\u4ee4\u5207\u6362python\u73af\u5883\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e0b\u7684<code>.venv</code>\uff0c\u53cd\u6b63\u5c31\u662f\u627e\u5230<code>.venv</code>\u6587\u4ef6\u5939\uff0c\u7136\u540e\u8fd0\u884c\u5b83\u91cc\u9762\u7684\u4e00\u4e2a<code>activate</code>\u6587\u4ef6\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5728\u4e0d\u540c\u7cfb\u7edf\u4e0b\u53ef\u80fd\u4f1a\u4e0d\u4e00\u6837~</li> </ol> Bash<pre><code># for linux/macos\nsource .venv/bin/activate \n# for windows\n.\\.venv\\Scripts\\activate \n</code></pre>"},{"location":"#4","title":"4. \u66f4\u65b0\u65e5\u5fd7","text":"<ul> <li>2025.05.21</li> <li>\u90e8\u5206\u7c7b\u6539\u7528pydantic\u7684BaseModel</li> <li>python\u7248\u672c\u66f4\u65b0\u52303.13</li> <li>2025.05.06</li> <li>\u91c7\u7528uv\u7ba1\u7406\u9879\u76ee\u4f9d\u8d56</li> <li>\u652f\u6301qwen3\u6a21\u578b\u7684enable_thinking\u529f\u80fd</li> <li>2025.05.01</li> <li>\u5bf9\u5de5\u5177\u8c03\u7528bug\u505a\u4e86\u4e00\u4e9b\u4fee\u590d</li> <li>\u51fd\u6570\u8c03\u7528\u652f\u6301List\u7c7b\u578b</li> <li>\u589e\u52a0\u9879\u76ee\u534f\u8bae\u89c4\u8303</li> <li>2025.04.22</li> <li>\u8ba1\u5212\u589e\u52a0MCP\u534f\u8bae\u7684\u652f\u6301</li> <li>2025.03.19</li> <li>\u66f4\u65b0README.md</li> <li>\u589e\u52a0<code>manus</code>\u6587\u4ef6\u5939\uff0c\u8ba1\u5212\u4ece\u96f6\u5f00\u59cb\u6784\u5efa<code>manus</code>\u667a\u80fd\u4f53</li> <li>\u589e\u52a0<code>MCP</code>\u6587\u4ef6\u5939\uff0c\u6d4b\u8bd5MCP\u534f\u8bae</li> <li>2025.02.25</li> <li>\u66f4\u65b0README.md</li> <li>\u5728<code>bilibili</code>\u6587\u4ef6\u5939\u4e2d\u589e\u52a0\u65cb\u8f6c\u4f4d\u7f6e\u7f16\u7801jupyter\u8bb2\u7a3f<code>rope.ipynb</code></li> <li>\u516c\u5f00\u672c\u9879\u76ee</li> </ul>"},{"location":"agent/","title":"Agent","text":""},{"location":"agent/#mymanus.agent.agent","title":"mymanus.agent.agent","text":""},{"location":"agent/#mymanus.agent.agent.BaseAgent","title":"BaseAgent  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u667a\u80fd\u4f53\u57fa\u7c7b</p> <p>Parameters:</p> Name Type Description Default <code>llm</code> <code>LLM</code> <p>\u5927\u6a21\u578b\u5b9e\u4f8b</p> required <code>tool_manager</code> <code>ToolManager</code> <p>\u5de5\u5177\u7ba1\u7406\u5668</p> required <code>memory_manager</code> <code>MemoryManager</code> <p>\u8bb0\u5fc6\u7ba1\u7406\u5668</p> required <p>Fields:</p> <ul> <li> <code>llm</code>                 (<code>LLM</code>)             </li> <li> <code>tool_manager</code>                 (<code>ToolManager</code>)             </li> <li> <code>memory_manager</code>                 (<code>MemoryManager</code>)             </li> </ul> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>class BaseAgent(BaseModel):\n    \"\"\"\u667a\u80fd\u4f53\u57fa\u7c7b\n\n    Args:\n        llm (LLM): \u5927\u6a21\u578b\u5b9e\u4f8b\n        tool_manager (ToolManager): \u5de5\u5177\u7ba1\u7406\u5668\n        memory_manager (MemoryManager): \u8bb0\u5fc6\u7ba1\u7406\u5668\n    \"\"\"\n\n    llm: LLM = Field(..., description=\"\u5927\u6a21\u578b\u5b9e\u4f8b\")\n    tool_manager: ToolManager = Field(..., description=\"\u5de5\u5177\u7ba1\u7406\u5668\")\n    memory_manager: MemoryManager = Field(..., description=\"\u8bb0\u5fc6\u7ba1\u7406\u5668\")\n\n    class Config:\n        # \u4e3a\u4ec0\u4e48\u8981\u52a0\u8fd9\u4e2a\u914d\u7f6e\uff1f\n        # \u56e0\u4e3aLLM\u3001ToolManager\u3001MemoryManager\u90fd\u4e0d\u662fpydantic\u80fd\u81ea\u52a8\u6821\u9a8c\u7684\u7c7b\u578b\uff0c\u8bb2\u767d\u4e86\u4e0d\u662fpython\u81ea\u5e26\u7684\u800c\u662f\u4f60\u81ea\u5df1\u5b9a\u4e49\u7684\u7c7b\uff0c\u6240\u4ee5\u8981\u52a0\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5426\u5219\u62a5\u9519\uff01\n        arbitrary_types_allowed = True\n\n    async def run(self, message: List[Dict]):\n        \"\"\"\u8fd0\u884c\u667a\u80fd\u4f53\n\n        Args:\n            message (List[Dict]): \u7528\u6237\u7684\u4e00\u53e5\u8bddquery\n        \"\"\"\n        raise NotImplementedError(\"\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0run\u65b9\u6cd5\")\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.BaseAgent.llm","title":"llm  <code>pydantic-field</code>","text":"Python<pre><code>llm: LLM\n</code></pre> <p>\u5927\u6a21\u578b\u5b9e\u4f8b</p>"},{"location":"agent/#mymanus.agent.agent.BaseAgent.memory_manager","title":"memory_manager  <code>pydantic-field</code>","text":"Python<pre><code>memory_manager: MemoryManager\n</code></pre> <p>\u8bb0\u5fc6\u7ba1\u7406\u5668</p>"},{"location":"agent/#mymanus.agent.agent.BaseAgent.tool_manager","title":"tool_manager  <code>pydantic-field</code>","text":"Python<pre><code>tool_manager: ToolManager\n</code></pre> <p>\u5de5\u5177\u7ba1\u7406\u5668</p>"},{"location":"agent/#mymanus.agent.agent.BaseAgent.run","title":"run  <code>async</code>","text":"Python<pre><code>run(message: List[Dict])\n</code></pre> <p>\u8fd0\u884c\u667a\u80fd\u4f53</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u7528\u6237\u7684\u4e00\u53e5\u8bddquery</p> required Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def run(self, message: List[Dict]):\n    \"\"\"\u8fd0\u884c\u667a\u80fd\u4f53\n\n    Args:\n        message (List[Dict]): \u7528\u6237\u7684\u4e00\u53e5\u8bddquery\n    \"\"\"\n    raise NotImplementedError(\"\u5b50\u7c7b\u5fc5\u987b\u5b9e\u73b0run\u65b9\u6cd5\")\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent","title":"ToolCallingAgent  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseAgent</code></p> <p>ToolCallingAgent\uff0c\u7531\u5de5\u5177\u3001\u8bb0\u5fc6\u3001\u89c4\u5212\u3001\u611f\u77e5\u7b49\u6a21\u5757\u6784\u5efa\uff0c\u54b1\u4eec\u4e00\u4e2a\u4e00\u4e2a\u6765\u5b9e\u73b0</p> <p>ToolCallingAgent\u7279\u70b9\uff1a     - \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u667a\u80fd\u4f53     - \u667a\u80fd\u4f53\u89c4\u5212\u7531\u4e00\u4e2a\u7b80\u5355\u5927\u6a21\u578b\u5b9e\u73b0     - \u53ea\u5305\u542b\u5de5\u5177\u6a21\u5757\u548c\u8bb0\u5fc6\u6a21\u5757     - \u5177\u5907React\u6846\u67b6\uff0c\u5148think\uff0c\u518dact     - \u652f\u6301\u57fa\u672c\u7684\u5bf9\u8bdd\u529f\u80fd     - \u652f\u6301\u5de5\u5177\u8c03\u7528     - \u540e\u7eed\u7684\u667a\u80fd\u4f53\u53ef\u4ee5\u7ee7\u627f\u8fd9\u4e2a\u57fa\u5ea7\u667a\u80fd\u4f53\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd</p> <p>Parameters:</p> Name Type Description Default <code>llm</code> <code>LLM</code> <p>\u5927\u6a21\u578b\u5b9e\u4f8b\uff0c\u5728\u8fd9\u91cc\u4e3b\u8981\u7528\u4e8e\u4efb\u52a1\u89c4\u5212\uff08\u7ee7\u627f\u81eaBaseAgent\uff09</p> required <code>tool_manager</code> <code>ToolManager</code> <p>\u5de5\u5177\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09</p> required <code>memory_manager</code> <code>MemoryManager</code> <p>\u8bb0\u5fc6\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09</p> required <code>max_step</code> <code>int</code> <p>\u6700\u5927\u6b65\u9aa4\uff0c\u9ed8\u8ba410</p> required <p>Fields:</p> <ul> <li> <code>llm</code>                 (<code>LLM</code>)             </li> <li> <code>tool_manager</code>                 (<code>ToolManager</code>)             </li> <li> <code>memory_manager</code>                 (<code>MemoryManager</code>)             </li> <li> <code>max_step</code>                 (<code>int</code>)             </li> <li> <code>next_step_prompt</code>                 (<code>str</code>)             </li> <li> <code>final_step_prompt</code>                 (<code>str</code>)             </li> </ul> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>class ToolCallingAgent(BaseAgent):\n    \"\"\"ToolCallingAgent\uff0c\u7531\u5de5\u5177\u3001\u8bb0\u5fc6\u3001\u89c4\u5212\u3001\u611f\u77e5\u7b49\u6a21\u5757\u6784\u5efa\uff0c\u54b1\u4eec\u4e00\u4e2a\u4e00\u4e2a\u6765\u5b9e\u73b0\n\n    ToolCallingAgent\u7279\u70b9\uff1a\n        - \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u667a\u80fd\u4f53\n        - \u667a\u80fd\u4f53\u89c4\u5212\u7531\u4e00\u4e2a\u7b80\u5355\u5927\u6a21\u578b\u5b9e\u73b0\n        - \u53ea\u5305\u542b\u5de5\u5177\u6a21\u5757\u548c\u8bb0\u5fc6\u6a21\u5757\n        - \u5177\u5907React\u6846\u67b6\uff0c\u5148think\uff0c\u518dact\n        - \u652f\u6301\u57fa\u672c\u7684\u5bf9\u8bdd\u529f\u80fd\n        - \u652f\u6301\u5de5\u5177\u8c03\u7528\n        - \u540e\u7eed\u7684\u667a\u80fd\u4f53\u53ef\u4ee5\u7ee7\u627f\u8fd9\u4e2a\u57fa\u5ea7\u667a\u80fd\u4f53\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\n\n    Args:\n        llm (LLM): \u5927\u6a21\u578b\u5b9e\u4f8b\uff0c\u5728\u8fd9\u91cc\u4e3b\u8981\u7528\u4e8e\u4efb\u52a1\u89c4\u5212\uff08\u7ee7\u627f\u81eaBaseAgent\uff09\n        tool_manager (ToolManager): \u5de5\u5177\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09\n        memory_manager (MemoryManager): \u8bb0\u5fc6\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09\n        max_step (int): \u6700\u5927\u6b65\u9aa4\uff0c\u9ed8\u8ba410\n    \"\"\"\n    max_step: int = Field(default=10, description=\"\u6700\u5927\u6b65\u9aa4\")\n    next_step_prompt: str = Field(default=NEXT_STEP_PROMPT,\n                                  description=\"\u4e0b\u4e00\u6b65\u63d0\u793a\")\n    final_step_prompt: str = Field(default=FINAL_STEP_PROMPT,\n                                   description=\"\u6700\u540e\u4e00\u6b65\u63d0\u793a\")\n\n    # React\u6846\u67b6\uff0c\u5148think\uff08reasoning\uff09\uff0c\u518dact\n    async def think(self, message: List[Dict]) -&gt; bool:\n        \"\"\"\u4f7f\u7528\u5927\u6a21\u578b\u8fdb\u884c\u601d\u8003\uff0c\u8fd4\u56de\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n\n        Args:\n            message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n        Returns:\n            bool: \u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n        \"\"\"\n        # \u6dfb\u52a0\u7ec8\u6b62\u63d0\u793a\n        message.append({\"role\": \"user\", \"content\": self.next_step_prompt})\n        response = await self.llm.chat(\n            messages=message, tools=self.tool_manager.get_tool_schema_list())\n\n        # \u56de\u590d\u5185\u5bb9\u5168\u90e8\u52a0\u5165\u8bb0\u5fc6\u6a21\u5757\uff0c\u52a0\u5165\u7684\u5f97\u662f\u5b57\u5178\n        self.memory_manager.add_message(response.model_dump())\n        # \u6253\u5370\u56de\u590d\u5185\u5bb9\uff0c\u6d41\u5f0f\u8f93\u51fa\u4f1a\u81ea\u52a8\u6253\u5370\uff0c\u4e0d\u5fc5\u8981\u91cd\u590d\u6253\u5370\n        if response.content and not self.llm.stream:\n            logger.info(f\"\u667a\u80fd\u4f53\u56de\u590d\uff1a{response.content}\")\n        # \u5224\u65ad\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n        if response.tool_calls:\n            return True\n        else:\n            return False\n\n    async def act(self, message: List[Dict]) -&gt; bool:\n        \"\"\"\u8c03\u7528\u5bf9\u5e94\u5de5\u5177\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5c06\u8fd4\u56de\u7ed3\u6784\u901a\u8fc7assistant message\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e00\u65e6\u8c03\u7528\u5de5\u5177\u8fd8\u9700\u8981\u53cd\u9988assistant message\uff0c\u8981\u628a\u51fd\u6570\u8fd0\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u5927\u6a21\u578b\u505a\u4e0b\u4e00\u6b65\u7684\u8ba1\u5212\n\n        Args:\n            message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n        Returns:\n            bool: \u662f\u5426\u6267\u884c\u5b8c\u6240\u6709\u7684\u5de5\u5177\n        \"\"\"\n\n        # \u6839\u636e\u8bb0\u5fc6\u8bfb\u53d6\u6700\u65b0\u7684\u56de\u590d\uff0c\u6839\u636etool_calls\u987a\u5e8f\u6267\u884c\u5de5\u5177\uff0c\u8fd4\u56de\u7684\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5de5\u5177\n        for tool_call in message[\"tool_calls\"]:\n\n            # \u62ff\u5230\u8c03\u7528\u5de5\u5177\u7684\u540d\u79f0\u3001\u5165\u53c2\u3001id\u3001index\n            tool_name = tool_call[\"function\"][\"name\"]\n            tool_arguments = tool_call[\"function\"][\"arguments\"]\n            tool_id = tool_call[\"id\"]\n\n            # \u6267\u884c\u5de5\u5177\n            logger.info(f\"\u8c03\u7528\u5de5\u5177\uff1a{tool_name}\uff0c\u5165\u53c2\uff1a{tool_arguments}\")\n            try:\n                # \u5982\u679ctool_arguments\u4e3a\u7a7a\u5b57\u5178\uff0c\u5219\u4e0d\u4f20\u5165\u53c2\u6570\n                if tool_arguments == \"{}\":\n                    tool_result = await self.tool_manager.execute_tool(\n                        tool_name)\n                else:\n                    # \u5c06tool_arguments\u8f6c\u6362\u4e3a\u5b57\u5178\n                    tool_arguments = json.loads(tool_arguments)\n                    tool_result = await self.tool_manager.execute_tool(\n                        tool_name, **tool_arguments)\n                logger.info(f\"\u5de5\u5177{tool_name}\u6267\u884c\u6210\u529f\")\n\n                # \u7136\u540e\u662f\u4e00\u4e2atool message\n                tool_message = {\n                    \"role\": \"tool\",\n                    \"content\": tool_result,\n                    \"tool_call_id\": tool_id,\n                }\n                self.memory_manager.add_message(tool_message)\n\n                if tool_call[\"function\"][\"name\"] == \"terminate\":\n                    logger.warning(f\"\u667a\u80fd\u4f53\u8ba4\u4e3a\u4efb\u52a1\u5b8c\u6210\uff0c\u7ec8\u6b62\u5de5\u5177\u8c03\u7528\")\n                    return True\n\n            except Exception as e:\n                logger.error(f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{e}\")\n                # \u5c06\u9519\u8bef\u4fe1\u606f\u544a\u77e5\u5927\u6a21\u578b\n                assistant_message = {\n                    \"content\": f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u8003\u8651\u8c03\u7528\u5176\u4ed6\u5de5\u5177\",\n                    \"refusal\": None,\n                    \"role\": \"assistant\",\n                    \"audio\": None,\n                    \"function_call\": None,\n                    \"tool_calls\": None,\n                }\n                self.memory_manager.add_message(assistant_message)\n        # \u8fd4\u56de\u7ed3\u679c\n        return False\n\n    async def run_step(self, message: List[Dict]):\n        \"\"\"\u8fd0\u884c\u4e00\u4e2areact\u6b65\u9aa4\uff0c\u5305\u62ec\u4e00\u6b21think\u548c\u4e00\u6b21act\n\n        Args:\n            message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n        Returns:\n            bool: \u662f\u5426\u662f\u6700\u540e\u4e00\u6b65\uff0c\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6\n        \"\"\"\n\n        # \u601d\u8003\n        logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u601d\u8003\u2026\u2026\")\n        should_act = await self.think(message)\n        if should_act:\n            # \u884c\u52a8\n            # \u83b7\u53d6\u6700\u65b0\u7684message\n            logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u884c\u52a8\u2026\u2026\")\n            current_message = self.memory_manager.get_memory()[-1]\n            should_terminate = await self.act(current_message)\n            if should_terminate:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    async def run(self, message: List[Dict]):\n        \"\"\"\u8fd0\u884c\u5b8c\u6574\u8f6e\u6570\u7684react\u8fc7\u7a0b\n\n        Args:\n            message (List[Dict]): \u7528\u6237\u7684\u4e00\u53e5\u8bddquery\n        \"\"\"\n\n        # \u7528\u6237\u95ee\u9898\u672c\u8eab\u4e5f\u8981\u52a0\u5230\u8bb0\u5fc6\u91cc\u9762\n        self.memory_manager.add_message(message)\n        step = 0\n        while step &lt; self.max_step:\n            logger.warning(f\"\u6b63\u5728\u6267\u884c\u7b2c{step+1}\u6b65\u2026\u2026\")\n            # \u8f93\u5165\u5168\u91cf\u7684message\n            final_step = await self.run_step(self.memory_manager.get_memory())\n            if final_step:\n                break\n            step += 1\n\n        # \u6700\u540e\u4e00\u6b65\u8981\u7efc\u5408\u9664\u4e86\u6700\u540e\u4e00\u8f6e\u4fe1\u606f\u7ed9\u7528\u6237\u4e00\u4e2a\u603b\u7ed3\u6027\u7684\u56de\u590d\uff0c\u8fd8\u9700\u8981\u548c\u5927\u6a21\u578b\u505a\u4e00\u6b21\u5bf9\u8bdd\n        if final_step:\n\n            final_message = {\"role\": \"user\", \"content\": self.final_step_prompt}\n            # \u6ce8\u610f\u5728\u8c03\u7528terminate\u5de5\u5177\u7684\u540c\u65f6\u8fd8\u53ef\u80fd\u6709\u8f93\u51fa\uff0c\u5f97\u628aterminate\u5f53\u6210\u4e00\u4e2a\u666e\u901a\u5de5\u5177\u5bf9\u5f85\n            # \u628afinal_message\u52a0\u5165\u5230memory\u5f53\u4e2d\n            self.memory_manager.add_message(final_message)\n\n            logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u603b\u7ed3\u7b54\u6848\u2026\u2026\")\n            # \u8fd9\u91cc\u6709\u4e00\u4e2a\u7279\u522b\u5751\u7684\u5730\u65b9\uff0c\u5c31\u662ftools\u5fc5\u987b\u5168\u7a0b\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u5927\u6a21\u578b\u81ea\u52a8\u8fdb\u5165\u65b0\u7684\u95ee\u7b54\uff0c\u65e0\u6cd5\u7ed3\u5408\u4e0a\u4e0b\u6587\u4fe1\u606f\u5206\u6790\u4e86\n            final_response = await self.llm.chat(\n                messages=self.memory_manager.get_memory(),\n                tool_choice=\"none\",\n                tools=self.tool_manager.get_tool_schema_list())\n            self.memory_manager.add_message(final_response.model_dump())\n            # \u7a7a\u4e00\u884c\n            print()\n            logger.warning(f\"\u667a\u80fd\u4f53\u603b\u7ed3\u7b54\u6848\u5b8c\u6210~\")\n\n        if step == self.max_step:\n            logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5df2\u8fbe\u6700\u5927\u6b65\u6570{self.max_step}\")\n\n        logger.warning(\"\u7ae5\u53d1\u53d1\u7684Manus\u8d85\u7ea7\u52a9\u624b\u5df2\u5e2e\u4f60\u89e3\u51b3\u5f53\u524d\u95ee\u9898\uff0c\u6709\u5176\u4ed6\u95ee\u9898\u8fd8\u53ef\u95ee\u6211\u54e6~\")\n        logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5b8c\u6210\uff0c\u8bb0\u5fc6\u6e05\u7a7a~\")\n        self.memory_manager.clear()\n\n    # \u667a\u80fd\u4f53\u652f\u6301\u5bf9\u5de5\u5177\u91c7\u7528\u88c5\u9970\u5668\u7684\u5f62\u5f0f\u53d8\u4e3a\u6ce8\u518c\u5de5\u5177\n    def tool(self, func: Callable, tool_name: Optional[str] = None):\n        \"\"\"\u7c7b\u4f3cMCP\u534f\u8bae\uff0c\u7528\u88c5\u9970\u5668\u76f4\u63a5\u6ce8\u518c\u5de5\u5177\n\n        Args:\n            func (Callable): \u8981\u6ce8\u518c\u7684\u5de5\u5177\u51fd\u6570\n            tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u51fd\u6570\u540d\u4f5c\u4e3a\u5de5\u5177\u540d\u79f0\n        \"\"\"\n\n        def decorator(func: Callable):\n            self.add_tool(func, tool_name)\n            return func\n\n        return decorator\n\n    def add_tool(self,\n                 func: Callable,\n                 tool_name: Optional[str] = None) -&gt; None:\n        self.tool_manager.register_tool(func, tool_name)\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.final_step_prompt","title":"final_step_prompt  <code>pydantic-field</code>","text":"Python<pre><code>final_step_prompt: str = FINAL_STEP_PROMPT\n</code></pre> <p>\u6700\u540e\u4e00\u6b65\u63d0\u793a</p>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.max_step","title":"max_step  <code>pydantic-field</code>","text":"Python<pre><code>max_step: int = 10\n</code></pre> <p>\u6700\u5927\u6b65\u9aa4</p>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.next_step_prompt","title":"next_step_prompt  <code>pydantic-field</code>","text":"Python<pre><code>next_step_prompt: str = NEXT_STEP_PROMPT\n</code></pre> <p>\u4e0b\u4e00\u6b65\u63d0\u793a</p>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.act","title":"act  <code>async</code>","text":"Python<pre><code>act(message: List[Dict]) -&gt; bool\n</code></pre> <p>\u8c03\u7528\u5bf9\u5e94\u5de5\u5177\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5c06\u8fd4\u56de\u7ed3\u6784\u901a\u8fc7assistant message\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e00\u65e6\u8c03\u7528\u5de5\u5177\u8fd8\u9700\u8981\u53cd\u9988assistant message\uff0c\u8981\u628a\u51fd\u6570\u8fd0\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u5927\u6a21\u578b\u505a\u4e0b\u4e00\u6b65\u7684\u8ba1\u5212</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u6d88\u606f\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>\u662f\u5426\u6267\u884c\u5b8c\u6240\u6709\u7684\u5de5\u5177</p> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def act(self, message: List[Dict]) -&gt; bool:\n    \"\"\"\u8c03\u7528\u5bf9\u5e94\u5de5\u5177\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5c06\u8fd4\u56de\u7ed3\u6784\u901a\u8fc7assistant message\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e00\u65e6\u8c03\u7528\u5de5\u5177\u8fd8\u9700\u8981\u53cd\u9988assistant message\uff0c\u8981\u628a\u51fd\u6570\u8fd0\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u5927\u6a21\u578b\u505a\u4e0b\u4e00\u6b65\u7684\u8ba1\u5212\n\n    Args:\n        message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n    Returns:\n        bool: \u662f\u5426\u6267\u884c\u5b8c\u6240\u6709\u7684\u5de5\u5177\n    \"\"\"\n\n    # \u6839\u636e\u8bb0\u5fc6\u8bfb\u53d6\u6700\u65b0\u7684\u56de\u590d\uff0c\u6839\u636etool_calls\u987a\u5e8f\u6267\u884c\u5de5\u5177\uff0c\u8fd4\u56de\u7684\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5de5\u5177\n    for tool_call in message[\"tool_calls\"]:\n\n        # \u62ff\u5230\u8c03\u7528\u5de5\u5177\u7684\u540d\u79f0\u3001\u5165\u53c2\u3001id\u3001index\n        tool_name = tool_call[\"function\"][\"name\"]\n        tool_arguments = tool_call[\"function\"][\"arguments\"]\n        tool_id = tool_call[\"id\"]\n\n        # \u6267\u884c\u5de5\u5177\n        logger.info(f\"\u8c03\u7528\u5de5\u5177\uff1a{tool_name}\uff0c\u5165\u53c2\uff1a{tool_arguments}\")\n        try:\n            # \u5982\u679ctool_arguments\u4e3a\u7a7a\u5b57\u5178\uff0c\u5219\u4e0d\u4f20\u5165\u53c2\u6570\n            if tool_arguments == \"{}\":\n                tool_result = await self.tool_manager.execute_tool(\n                    tool_name)\n            else:\n                # \u5c06tool_arguments\u8f6c\u6362\u4e3a\u5b57\u5178\n                tool_arguments = json.loads(tool_arguments)\n                tool_result = await self.tool_manager.execute_tool(\n                    tool_name, **tool_arguments)\n            logger.info(f\"\u5de5\u5177{tool_name}\u6267\u884c\u6210\u529f\")\n\n            # \u7136\u540e\u662f\u4e00\u4e2atool message\n            tool_message = {\n                \"role\": \"tool\",\n                \"content\": tool_result,\n                \"tool_call_id\": tool_id,\n            }\n            self.memory_manager.add_message(tool_message)\n\n            if tool_call[\"function\"][\"name\"] == \"terminate\":\n                logger.warning(f\"\u667a\u80fd\u4f53\u8ba4\u4e3a\u4efb\u52a1\u5b8c\u6210\uff0c\u7ec8\u6b62\u5de5\u5177\u8c03\u7528\")\n                return True\n\n        except Exception as e:\n            logger.error(f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{e}\")\n            # \u5c06\u9519\u8bef\u4fe1\u606f\u544a\u77e5\u5927\u6a21\u578b\n            assistant_message = {\n                \"content\": f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u8003\u8651\u8c03\u7528\u5176\u4ed6\u5de5\u5177\",\n                \"refusal\": None,\n                \"role\": \"assistant\",\n                \"audio\": None,\n                \"function_call\": None,\n                \"tool_calls\": None,\n            }\n            self.memory_manager.add_message(assistant_message)\n    # \u8fd4\u56de\u7ed3\u679c\n    return False\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.run","title":"run  <code>async</code>","text":"Python<pre><code>run(message: List[Dict])\n</code></pre> <p>\u8fd0\u884c\u5b8c\u6574\u8f6e\u6570\u7684react\u8fc7\u7a0b</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u7528\u6237\u7684\u4e00\u53e5\u8bddquery</p> required Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def run(self, message: List[Dict]):\n    \"\"\"\u8fd0\u884c\u5b8c\u6574\u8f6e\u6570\u7684react\u8fc7\u7a0b\n\n    Args:\n        message (List[Dict]): \u7528\u6237\u7684\u4e00\u53e5\u8bddquery\n    \"\"\"\n\n    # \u7528\u6237\u95ee\u9898\u672c\u8eab\u4e5f\u8981\u52a0\u5230\u8bb0\u5fc6\u91cc\u9762\n    self.memory_manager.add_message(message)\n    step = 0\n    while step &lt; self.max_step:\n        logger.warning(f\"\u6b63\u5728\u6267\u884c\u7b2c{step+1}\u6b65\u2026\u2026\")\n        # \u8f93\u5165\u5168\u91cf\u7684message\n        final_step = await self.run_step(self.memory_manager.get_memory())\n        if final_step:\n            break\n        step += 1\n\n    # \u6700\u540e\u4e00\u6b65\u8981\u7efc\u5408\u9664\u4e86\u6700\u540e\u4e00\u8f6e\u4fe1\u606f\u7ed9\u7528\u6237\u4e00\u4e2a\u603b\u7ed3\u6027\u7684\u56de\u590d\uff0c\u8fd8\u9700\u8981\u548c\u5927\u6a21\u578b\u505a\u4e00\u6b21\u5bf9\u8bdd\n    if final_step:\n\n        final_message = {\"role\": \"user\", \"content\": self.final_step_prompt}\n        # \u6ce8\u610f\u5728\u8c03\u7528terminate\u5de5\u5177\u7684\u540c\u65f6\u8fd8\u53ef\u80fd\u6709\u8f93\u51fa\uff0c\u5f97\u628aterminate\u5f53\u6210\u4e00\u4e2a\u666e\u901a\u5de5\u5177\u5bf9\u5f85\n        # \u628afinal_message\u52a0\u5165\u5230memory\u5f53\u4e2d\n        self.memory_manager.add_message(final_message)\n\n        logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u603b\u7ed3\u7b54\u6848\u2026\u2026\")\n        # \u8fd9\u91cc\u6709\u4e00\u4e2a\u7279\u522b\u5751\u7684\u5730\u65b9\uff0c\u5c31\u662ftools\u5fc5\u987b\u5168\u7a0b\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u5927\u6a21\u578b\u81ea\u52a8\u8fdb\u5165\u65b0\u7684\u95ee\u7b54\uff0c\u65e0\u6cd5\u7ed3\u5408\u4e0a\u4e0b\u6587\u4fe1\u606f\u5206\u6790\u4e86\n        final_response = await self.llm.chat(\n            messages=self.memory_manager.get_memory(),\n            tool_choice=\"none\",\n            tools=self.tool_manager.get_tool_schema_list())\n        self.memory_manager.add_message(final_response.model_dump())\n        # \u7a7a\u4e00\u884c\n        print()\n        logger.warning(f\"\u667a\u80fd\u4f53\u603b\u7ed3\u7b54\u6848\u5b8c\u6210~\")\n\n    if step == self.max_step:\n        logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5df2\u8fbe\u6700\u5927\u6b65\u6570{self.max_step}\")\n\n    logger.warning(\"\u7ae5\u53d1\u53d1\u7684Manus\u8d85\u7ea7\u52a9\u624b\u5df2\u5e2e\u4f60\u89e3\u51b3\u5f53\u524d\u95ee\u9898\uff0c\u6709\u5176\u4ed6\u95ee\u9898\u8fd8\u53ef\u95ee\u6211\u54e6~\")\n    logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5b8c\u6210\uff0c\u8bb0\u5fc6\u6e05\u7a7a~\")\n    self.memory_manager.clear()\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.run_step","title":"run_step  <code>async</code>","text":"Python<pre><code>run_step(message: List[Dict])\n</code></pre> <p>\u8fd0\u884c\u4e00\u4e2areact\u6b65\u9aa4\uff0c\u5305\u62ec\u4e00\u6b21think\u548c\u4e00\u6b21act</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u6d88\u606f\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>\u662f\u5426\u662f\u6700\u540e\u4e00\u6b65\uff0c\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6</p> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def run_step(self, message: List[Dict]):\n    \"\"\"\u8fd0\u884c\u4e00\u4e2areact\u6b65\u9aa4\uff0c\u5305\u62ec\u4e00\u6b21think\u548c\u4e00\u6b21act\n\n    Args:\n        message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n    Returns:\n        bool: \u662f\u5426\u662f\u6700\u540e\u4e00\u6b65\uff0c\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6\n    \"\"\"\n\n    # \u601d\u8003\n    logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u601d\u8003\u2026\u2026\")\n    should_act = await self.think(message)\n    if should_act:\n        # \u884c\u52a8\n        # \u83b7\u53d6\u6700\u65b0\u7684message\n        logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u884c\u52a8\u2026\u2026\")\n        current_message = self.memory_manager.get_memory()[-1]\n        should_terminate = await self.act(current_message)\n        if should_terminate:\n            return True\n        else:\n            return False\n    else:\n        return False\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.think","title":"think  <code>async</code>","text":"Python<pre><code>think(message: List[Dict]) -&gt; bool\n</code></pre> <p>\u4f7f\u7528\u5927\u6a21\u578b\u8fdb\u884c\u601d\u8003\uff0c\u8fd4\u56de\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u6d88\u606f\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177</p> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def think(self, message: List[Dict]) -&gt; bool:\n    \"\"\"\u4f7f\u7528\u5927\u6a21\u578b\u8fdb\u884c\u601d\u8003\uff0c\u8fd4\u56de\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n\n    Args:\n        message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n    Returns:\n        bool: \u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n    \"\"\"\n    # \u6dfb\u52a0\u7ec8\u6b62\u63d0\u793a\n    message.append({\"role\": \"user\", \"content\": self.next_step_prompt})\n    response = await self.llm.chat(\n        messages=message, tools=self.tool_manager.get_tool_schema_list())\n\n    # \u56de\u590d\u5185\u5bb9\u5168\u90e8\u52a0\u5165\u8bb0\u5fc6\u6a21\u5757\uff0c\u52a0\u5165\u7684\u5f97\u662f\u5b57\u5178\n    self.memory_manager.add_message(response.model_dump())\n    # \u6253\u5370\u56de\u590d\u5185\u5bb9\uff0c\u6d41\u5f0f\u8f93\u51fa\u4f1a\u81ea\u52a8\u6253\u5370\uff0c\u4e0d\u5fc5\u8981\u91cd\u590d\u6253\u5370\n    if response.content and not self.llm.stream:\n        logger.info(f\"\u667a\u80fd\u4f53\u56de\u590d\uff1a{response.content}\")\n    # \u5224\u65ad\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n    if response.tool_calls:\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"agent/#mymanus.agent.agent.ToolCallingAgent.tool","title":"tool","text":"Python<pre><code>tool(func: Callable, tool_name: Optional[str] = None)\n</code></pre> <p>\u7c7b\u4f3cMCP\u534f\u8bae\uff0c\u7528\u88c5\u9970\u5668\u76f4\u63a5\u6ce8\u518c\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>\u8981\u6ce8\u518c\u7684\u5de5\u5177\u51fd\u6570</p> required <code>tool_name</code> <code>Optional[str]</code> <p>\u5de5\u5177\u540d\u79f0\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u51fd\u6570\u540d\u4f5c\u4e3a\u5de5\u5177\u540d\u79f0</p> <code>None</code> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>def tool(self, func: Callable, tool_name: Optional[str] = None):\n    \"\"\"\u7c7b\u4f3cMCP\u534f\u8bae\uff0c\u7528\u88c5\u9970\u5668\u76f4\u63a5\u6ce8\u518c\u5de5\u5177\n\n    Args:\n        func (Callable): \u8981\u6ce8\u518c\u7684\u5de5\u5177\u51fd\u6570\n        tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u51fd\u6570\u540d\u4f5c\u4e3a\u5de5\u5177\u540d\u79f0\n    \"\"\"\n\n    def decorator(func: Callable):\n        self.add_tool(func, tool_name)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"agent/#mymanus.agent.llm","title":"mymanus.agent.llm","text":""},{"location":"agent/#mymanus.agent.llm.LLM","title":"LLM","text":"<p>\u5927\u6a21\u578b\u7c7b\uff0c\u53ef\u7528\u4e8eagent\u4e2d\u4f5c\u4e3a\u5927\u8111\u7528\u6765\u89c4\u5212\u548c\u6267\u884c\u4efb\u52a1\uff0c\u57fa\u4e8eopenai\u63a5\u53e3\u89c4\u8303</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>\u5927\u6a21\u578bapi key\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u5927\u6a21\u578b\u4f8b\u5982vllm\uff0c\u9700\u8981\u8bbe\u7f6eapi_key\u4e3a\"EMPTY\"\u3002</p> required <code>base_url</code> <code>str</code> <p>\u5927\u6a21\u578bbase url\u3002</p> required <code>model</code> <code>str</code> <p>\u5927\u6a21\u578b\u540d\u79f0\uff0c\u9ed8\u8ba4\"qwen-plus\"\u3002</p> <code>'qwen-plus'</code> <code>tool_choice</code> <code>str</code> <p>\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\"auto\"\u3002</p> <code>'auto'</code> <code>temperature</code> <code>float</code> <p>\u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba40.7\u3002</p> <code>0.7</code> <code>max_tokens</code> <code>int</code> <p>\u6700\u5927tokens\uff0c\u9ed8\u8ba41000\u3002</p> <code>1000</code> <code>stream</code> <code>bool</code> <p>\u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4False\u3002</p> <code>False</code> <code>enable_thinking</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u662fNone\uff0c\u8868\u793a\u8be5\u5927\u6a21\u578b\u4e0d\u5177\u5907\u601d\u8003\u6a21\u5f0f\u5207\u6362\u80fd\u529b\u3002</p> <code>None</code> Source code in <code>src/mymanus/agent/llm.py</code> Python<pre><code>class LLM:\n    \"\"\"\u5927\u6a21\u578b\u7c7b\uff0c\u53ef\u7528\u4e8eagent\u4e2d\u4f5c\u4e3a\u5927\u8111\u7528\u6765\u89c4\u5212\u548c\u6267\u884c\u4efb\u52a1\uff0c\u57fa\u4e8eopenai\u63a5\u53e3\u89c4\u8303\n\n    Args:\n        api_key (str): \u5927\u6a21\u578bapi key\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u5927\u6a21\u578b\u4f8b\u5982vllm\uff0c\u9700\u8981\u8bbe\u7f6eapi_key\u4e3a\"EMPTY\"\u3002\n        base_url (str): \u5927\u6a21\u578bbase url\u3002\n        model (str, optional): \u5927\u6a21\u578b\u540d\u79f0\uff0c\u9ed8\u8ba4\"qwen-plus\"\u3002\n        tool_choice (str, optional): \u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\"auto\"\u3002\n        temperature (float, optional): \u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba40.7\u3002\n        max_tokens (int, optional): \u6700\u5927tokens\uff0c\u9ed8\u8ba41000\u3002\n        stream (bool, optional): \u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4False\u3002\n        enable_thinking (bool, optional): \u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u662fNone\uff0c\u8868\u793a\u8be5\u5927\u6a21\u578b\u4e0d\u5177\u5907\u601d\u8003\u6a21\u5f0f\u5207\u6362\u80fd\u529b\u3002\n    \"\"\"\n\n    def __init__(self,\n                 api_key: str,\n                 base_url: str,\n                 model: str = \"qwen-plus\",\n                 tool_choice: Literal[\"auto\", \"required\", \"none\"] = \"auto\",\n                 temperature: float = 0.7,\n                 max_tokens: int = 1000,\n                 stream: bool = False,\n                 enable_thinking: Optional[bool] = None):\n\n        self.client = AsyncOpenAI(api_key=api_key, base_url=base_url)\n        self.model = model\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.tool_choice = tool_choice\n        self.stream = stream\n        self.enable_thinking = enable_thinking\n\n    async def chat(self,\n                   messages: List[Dict],\n                   tools: Optional[List[Dict]] = None,\n                   temperature: Optional[float] = None,\n                   max_tokens: Optional[int] = None,\n                   tool_choice: Optional[Literal[\"auto\", \"required\",\n                                                 \"none\"]] = None,\n                   stream: Optional[bool] = None,\n                   enable_thinking: Optional[bool] = None) -&gt; Dict:\n        \"\"\"\u4e0e\u5927\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u5bf9\u8bdd\n\n        Args:\n            messages (List[Dict]): \u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\n            tools (List[Dict], optional): \u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\uff08function schema\u683c\u5f0f\uff09\u3002 Defaults to None.\n            temperature (float, optional): \u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6e29\u5ea6\u3002\n            max_tokens (int, optional): \u6700\u5927tokens\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6700\u5927tokens\u3002\n            tool_choice (str, optional): \u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\u3002\n            stream (bool, optional): \u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6d41\u5f0f\u8f93\u51fa\u3002\n            enable_thinking (bool, optional): \u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u601d\u8003\u6a21\u5f0f\u3002\n\n        Returns:\n            ChatCompletionMessage: openai\u683c\u5f0f\u7684\u56de\u590d\u7c7b\n        \"\"\"\n        try:\n            # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\uff0c\u5b57\u5178\u5f62\u5f0f\n            request_params = {\n                \"model\": self.model,\n                \"messages\": messages,\n                \"tool_choice\":\n                self.tool_choice if tool_choice is None else tool_choice,\n                \"max_tokens\":\n                self.max_tokens if max_tokens is None else max_tokens,\n                \"temperature\":\n                self.temperature if temperature is None else temperature,\n                \"stream\": self.stream if stream is None else stream,\n            }\n\n            if enable_thinking is not None:\n                request_params[\"extra_body\"] = {\n                    \"enable_thinking\": enable_thinking\n                }\n            elif self.enable_thinking is not None:\n                request_params[\"extra_body\"] = {\n                    \"enable_thinking\": self.enable_thinking\n                }\n\n            # \u5982\u679c\u6709\u5de5\u5177,\u6dfb\u52a0\u5de5\u5177\u76f8\u5173\u53c2\u6570\n            if tools:\n                request_params[\"tools\"] = tools\n\n            # \u8c03\u7528API\n            if not request_params[\"stream\"]:\n                # \u975e\u6d41\u5f0f\u8bf7\u6c42\n                response = await self.client.chat.completions.create(\n                    **request_params)\n                # \u66f4\u65b0\uff1a\u628a\u63a8\u7406\u8fc7\u7a0bprint\u51fa\u6765\u4f46\u4e0d\u4fdd\u5b58\n                print(f\"\u63a8\u7406\u8fc7\u7a0b\uff1a{response.choices[0].message.reasoning_content}\")\n                return response.choices[0].message\n            else:\n                # \u6d41\u5f0f\u8bf7\u6c42\n                response = await self.client.chat.completions.create(\n                    **request_params)\n                collected_content = []\n                collected_tool_calls = []\n                current_tool_call = None\n\n                async for chunk in response:\n                    # \u5904\u7406\u5185\u5bb9\u90e8\u5206\n                    if chunk.choices[0].delta.content:\n                        chunk_content = chunk.choices[0].delta.content\n                        collected_content.append(chunk_content)\n                        print(chunk_content, end=\"\", flush=True)\n                    # \u66f4\u65b0\uff1a\u5904\u7406\u63a8\u7406\u5185\u5bb9\u90e8\u5206\uff0c\u4f46\u6700\u540e\u4e0d\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u8fd4\u56de\u7ed9\u4eba\u770b\u6216\u63d0\u4f9b\u7ed9\u5927\u6a21\u578b\uff0c\u9700\u8981\u786e\u8ba4reasoning_content\u5b57\u6bb5\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u662f\u6bcf\u4e2a\u5927\u6a21\u578b\u90fd\u6709\u8fd9\u4e2a\u5b57\u6bb5\n                    if hasattr(chunk.choices[0].delta, \"reasoning_content\"):\n                        if chunk.choices[0].delta.reasoning_content:\n                            reasoning_content = chunk.choices[\n                                0].delta.reasoning_content\n                            print(reasoning_content, end=\"\", flush=True)\n                    # if chunk.choices[0].delta.reasoning_content:\n                    #     reasoning_content = chunk.choices[\n                    #         0].delta.reasoning_content\n                    #     print(reasoning_content, end=\"\", flush=True)\n\n                    # \u5904\u7406\u5de5\u5177\u8c03\u7528\u90e8\u5206\uff1a\u5de5\u5177\u8c03\u7528\u90e8\u5206\u7b2c\u4e00\u4e2a\u8fd4\u56de\u7684\u6d41\u5f0f\u8f93\u51fa\u5bf9\u8c61\u53ef\u4ee5\u83b7\u5f97\u5de5\u5177\u540d\u79f0\uff08name\uff09\uff0c\u4f46\u5de5\u5177\u7684\u5165\u53c2\u9700\u8981\u62fc\u63a5\n                    if chunk.choices[0].delta.tool_calls:\n                        for tool_call in chunk.choices[0].delta.tool_calls:\n                            # \u65b0\u5de5\u5177\u8c03\u7528\u7684\u5f00\u59cb\n                            if tool_call.index is not None:\n                                # \u5982\u679c\u662f\u65b0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u4fdd\u5b58\u5f53\u524d\u5de5\u5177\u8c03\u7528\u5e76\u521b\u5efa\u65b0\u7684\n                                if current_tool_call is None or tool_call.index != current_tool_call[\n                                        \"index\"]:\n                                    if current_tool_call:\n                                        collected_tool_calls.append(\n                                            current_tool_call)\n                                    current_tool_call = {\n                                        \"id\": tool_call.id or \"\",\n                                        \"type\": \"function\",\n                                        \"index\": tool_call.index,\n                                        \"function\": {\n                                            \"name\": \"\",\n                                            \"arguments\": \"\"\n                                        }\n                                    }\n\n                            # \u66f4\u65b0\u5de5\u5177\u540d\u79f0\uff08\u5b9e\u9645\u4e0a\u53ea\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u65f6\u8bbe\u7f6e\uff09\n                            if tool_call.function and tool_call.function.name:\n                                current_tool_call[\"function\"][\n                                    \"name\"] = tool_call.function.name\n                            # \u66f4\u65b0\u5de5\u5177\u53c2\u6570\uff08\u9700\u8981\u62fc\u63a5\uff09\n                            if tool_call.function and tool_call.function.arguments:\n                                current_tool_call[\"function\"][\n                                    \"arguments\"] += tool_call.function.arguments\n\n                # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u5de5\u5177\u8c03\u7528\n                if current_tool_call:\n                    collected_tool_calls.append(current_tool_call)\n\n                # \u628a\u5b57\u5178\u8f6c\u6362\u4e3aopenai\u7684ChatCompletionMessage\u5bf9\u8c61\n                return ChatCompletionMessage(\n                    role=\"assistant\",\n                    content=\"\".join(collected_content).strip()\n                    if collected_content else \"\",\n                    tool_calls=collected_tool_calls\n                    if collected_tool_calls else None)\n\n        except Exception as e:\n            raise Exception(f\"\u8c03\u7528\u5927\u6a21\u578bAPI\u5931\u8d25: {str(e)}\")\n</code></pre>"},{"location":"agent/#mymanus.agent.llm.LLM.chat","title":"chat  <code>async</code>","text":"Python<pre><code>chat(messages: List[Dict], tools: Optional[List[Dict]] = None, temperature: Optional[float] = None, max_tokens: Optional[int] = None, tool_choice: Optional[Literal['auto', 'required', 'none']] = None, stream: Optional[bool] = None, enable_thinking: Optional[bool] = None) -&gt; Dict\n</code></pre> <p>\u4e0e\u5927\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u5bf9\u8bdd</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>List[Dict]</code> <p>\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55</p> required <code>tools</code> <code>List[Dict]</code> <p>\u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\uff08function schema\u683c\u5f0f\uff09\u3002 Defaults to None.</p> <code>None</code> <code>temperature</code> <code>float</code> <p>\u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6e29\u5ea6\u3002</p> <code>None</code> <code>max_tokens</code> <code>int</code> <p>\u6700\u5927tokens\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6700\u5927tokens\u3002</p> <code>None</code> <code>tool_choice</code> <code>str</code> <p>\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\u3002</p> <code>None</code> <code>stream</code> <code>bool</code> <p>\u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6d41\u5f0f\u8f93\u51fa\u3002</p> <code>None</code> <code>enable_thinking</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u601d\u8003\u6a21\u5f0f\u3002</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ChatCompletionMessage</code> <code>Dict</code> <p>openai\u683c\u5f0f\u7684\u56de\u590d\u7c7b</p> Source code in <code>src/mymanus/agent/llm.py</code> Python<pre><code>async def chat(self,\n               messages: List[Dict],\n               tools: Optional[List[Dict]] = None,\n               temperature: Optional[float] = None,\n               max_tokens: Optional[int] = None,\n               tool_choice: Optional[Literal[\"auto\", \"required\",\n                                             \"none\"]] = None,\n               stream: Optional[bool] = None,\n               enable_thinking: Optional[bool] = None) -&gt; Dict:\n    \"\"\"\u4e0e\u5927\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u5bf9\u8bdd\n\n    Args:\n        messages (List[Dict]): \u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\n        tools (List[Dict], optional): \u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\uff08function schema\u683c\u5f0f\uff09\u3002 Defaults to None.\n        temperature (float, optional): \u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6e29\u5ea6\u3002\n        max_tokens (int, optional): \u6700\u5927tokens\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6700\u5927tokens\u3002\n        tool_choice (str, optional): \u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\u3002\n        stream (bool, optional): \u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6d41\u5f0f\u8f93\u51fa\u3002\n        enable_thinking (bool, optional): \u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u601d\u8003\u6a21\u5f0f\u3002\n\n    Returns:\n        ChatCompletionMessage: openai\u683c\u5f0f\u7684\u56de\u590d\u7c7b\n    \"\"\"\n    try:\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\uff0c\u5b57\u5178\u5f62\u5f0f\n        request_params = {\n            \"model\": self.model,\n            \"messages\": messages,\n            \"tool_choice\":\n            self.tool_choice if tool_choice is None else tool_choice,\n            \"max_tokens\":\n            self.max_tokens if max_tokens is None else max_tokens,\n            \"temperature\":\n            self.temperature if temperature is None else temperature,\n            \"stream\": self.stream if stream is None else stream,\n        }\n\n        if enable_thinking is not None:\n            request_params[\"extra_body\"] = {\n                \"enable_thinking\": enable_thinking\n            }\n        elif self.enable_thinking is not None:\n            request_params[\"extra_body\"] = {\n                \"enable_thinking\": self.enable_thinking\n            }\n\n        # \u5982\u679c\u6709\u5de5\u5177,\u6dfb\u52a0\u5de5\u5177\u76f8\u5173\u53c2\u6570\n        if tools:\n            request_params[\"tools\"] = tools\n\n        # \u8c03\u7528API\n        if not request_params[\"stream\"]:\n            # \u975e\u6d41\u5f0f\u8bf7\u6c42\n            response = await self.client.chat.completions.create(\n                **request_params)\n            # \u66f4\u65b0\uff1a\u628a\u63a8\u7406\u8fc7\u7a0bprint\u51fa\u6765\u4f46\u4e0d\u4fdd\u5b58\n            print(f\"\u63a8\u7406\u8fc7\u7a0b\uff1a{response.choices[0].message.reasoning_content}\")\n            return response.choices[0].message\n        else:\n            # \u6d41\u5f0f\u8bf7\u6c42\n            response = await self.client.chat.completions.create(\n                **request_params)\n            collected_content = []\n            collected_tool_calls = []\n            current_tool_call = None\n\n            async for chunk in response:\n                # \u5904\u7406\u5185\u5bb9\u90e8\u5206\n                if chunk.choices[0].delta.content:\n                    chunk_content = chunk.choices[0].delta.content\n                    collected_content.append(chunk_content)\n                    print(chunk_content, end=\"\", flush=True)\n                # \u66f4\u65b0\uff1a\u5904\u7406\u63a8\u7406\u5185\u5bb9\u90e8\u5206\uff0c\u4f46\u6700\u540e\u4e0d\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u8fd4\u56de\u7ed9\u4eba\u770b\u6216\u63d0\u4f9b\u7ed9\u5927\u6a21\u578b\uff0c\u9700\u8981\u786e\u8ba4reasoning_content\u5b57\u6bb5\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u662f\u6bcf\u4e2a\u5927\u6a21\u578b\u90fd\u6709\u8fd9\u4e2a\u5b57\u6bb5\n                if hasattr(chunk.choices[0].delta, \"reasoning_content\"):\n                    if chunk.choices[0].delta.reasoning_content:\n                        reasoning_content = chunk.choices[\n                            0].delta.reasoning_content\n                        print(reasoning_content, end=\"\", flush=True)\n                # if chunk.choices[0].delta.reasoning_content:\n                #     reasoning_content = chunk.choices[\n                #         0].delta.reasoning_content\n                #     print(reasoning_content, end=\"\", flush=True)\n\n                # \u5904\u7406\u5de5\u5177\u8c03\u7528\u90e8\u5206\uff1a\u5de5\u5177\u8c03\u7528\u90e8\u5206\u7b2c\u4e00\u4e2a\u8fd4\u56de\u7684\u6d41\u5f0f\u8f93\u51fa\u5bf9\u8c61\u53ef\u4ee5\u83b7\u5f97\u5de5\u5177\u540d\u79f0\uff08name\uff09\uff0c\u4f46\u5de5\u5177\u7684\u5165\u53c2\u9700\u8981\u62fc\u63a5\n                if chunk.choices[0].delta.tool_calls:\n                    for tool_call in chunk.choices[0].delta.tool_calls:\n                        # \u65b0\u5de5\u5177\u8c03\u7528\u7684\u5f00\u59cb\n                        if tool_call.index is not None:\n                            # \u5982\u679c\u662f\u65b0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u4fdd\u5b58\u5f53\u524d\u5de5\u5177\u8c03\u7528\u5e76\u521b\u5efa\u65b0\u7684\n                            if current_tool_call is None or tool_call.index != current_tool_call[\n                                    \"index\"]:\n                                if current_tool_call:\n                                    collected_tool_calls.append(\n                                        current_tool_call)\n                                current_tool_call = {\n                                    \"id\": tool_call.id or \"\",\n                                    \"type\": \"function\",\n                                    \"index\": tool_call.index,\n                                    \"function\": {\n                                        \"name\": \"\",\n                                        \"arguments\": \"\"\n                                    }\n                                }\n\n                        # \u66f4\u65b0\u5de5\u5177\u540d\u79f0\uff08\u5b9e\u9645\u4e0a\u53ea\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u65f6\u8bbe\u7f6e\uff09\n                        if tool_call.function and tool_call.function.name:\n                            current_tool_call[\"function\"][\n                                \"name\"] = tool_call.function.name\n                        # \u66f4\u65b0\u5de5\u5177\u53c2\u6570\uff08\u9700\u8981\u62fc\u63a5\uff09\n                        if tool_call.function and tool_call.function.arguments:\n                            current_tool_call[\"function\"][\n                                \"arguments\"] += tool_call.function.arguments\n\n            # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u5de5\u5177\u8c03\u7528\n            if current_tool_call:\n                collected_tool_calls.append(current_tool_call)\n\n            # \u628a\u5b57\u5178\u8f6c\u6362\u4e3aopenai\u7684ChatCompletionMessage\u5bf9\u8c61\n            return ChatCompletionMessage(\n                role=\"assistant\",\n                content=\"\".join(collected_content).strip()\n                if collected_content else \"\",\n                tool_calls=collected_tool_calls\n                if collected_tool_calls else None)\n\n    except Exception as e:\n        raise Exception(f\"\u8c03\u7528\u5927\u6a21\u578bAPI\u5931\u8d25: {str(e)}\")\n</code></pre>"},{"location":"agent/#mymanus.agent.mcp_agent","title":"mymanus.agent.mcp_agent","text":""},{"location":"agent/#mymanus.agent.memory_manager","title":"mymanus.agent.memory_manager","text":""},{"location":"agent/#mymanus.agent.memory_manager.MemoryManager","title":"MemoryManager  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u8bb0\u5fc6\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u5b58\u50a8\u5bf9\u8bdd\u5386\u53f2</p> <p>Fields:</p> <ul> <li> <code>memory</code>                 (<code>List[Dict[str, str]]</code>)             </li> <li> <code>max_memory</code>                 (<code>int</code>)             </li> </ul> Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>class MemoryManager(BaseModel):\n    \"\"\"\u8bb0\u5fc6\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u5b58\u50a8\u5bf9\u8bdd\u5386\u53f2\n    \"\"\"\n    memory: List[Dict[str, str]] = Field(default_factory=list,\n                                         description=\"\u8bb0\u5fc6\")\n    max_memory: int = Field(default=10, description=\"\u6700\u5927\u8bb0\u5fc6\u6570\")\n\n    def add_message(self, message: Union[Dict[str, str], List[Dict[str,\n                                                                   str]]]):\n        \"\"\"\u6dfb\u52a0\u4e00\u6761\u6d88\u606f\u5230\u8bb0\u5fc6\uff0c\u8d85\u8fc7\u6700\u5927\u8bb0\u5fc6\u6570\u5219\u5220\u9664\u6700\u65e9\u7684\u6d88\u606f\n\n        Args:\n            message (Dict[str, str]): \u6d88\u606f\n        \"\"\"\n        if isinstance(message, Dict):\n            self.memory.append(message)\n        elif isinstance(message, List):\n            self.memory.extend(message)\n        else:\n            raise ValueError(\"message must be a Dict or List\")\n        if len(self.memory) &gt; self.max_memory:\n            self.memory.pop(0)\n\n    def get_memory(self) -&gt; List[Dict[str, str]]:\n        \"\"\"\u83b7\u53d6\u8bb0\u5fc6\"\"\"\n        return self.memory\n\n    def clear(self):\n        \"\"\"\u6e05\u7a7a\u8bb0\u5fc6\"\"\"\n        self.memory = []\n</code></pre>"},{"location":"agent/#mymanus.agent.memory_manager.MemoryManager.max_memory","title":"max_memory  <code>pydantic-field</code>","text":"Python<pre><code>max_memory: int = 10\n</code></pre> <p>\u6700\u5927\u8bb0\u5fc6\u6570</p>"},{"location":"agent/#mymanus.agent.memory_manager.MemoryManager.memory","title":"memory  <code>pydantic-field</code>","text":"Python<pre><code>memory: List[Dict[str, str]]\n</code></pre> <p>\u8bb0\u5fc6</p>"},{"location":"agent/#mymanus.agent.memory_manager.MemoryManager.add_message","title":"add_message","text":"Python<pre><code>add_message(message: Union[Dict[str, str], List[Dict[str, str]]])\n</code></pre> <p>\u6dfb\u52a0\u4e00\u6761\u6d88\u606f\u5230\u8bb0\u5fc6\uff0c\u8d85\u8fc7\u6700\u5927\u8bb0\u5fc6\u6570\u5219\u5220\u9664\u6700\u65e9\u7684\u6d88\u606f</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Dict[str, str]</code> <p>\u6d88\u606f</p> required Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>def add_message(self, message: Union[Dict[str, str], List[Dict[str,\n                                                               str]]]):\n    \"\"\"\u6dfb\u52a0\u4e00\u6761\u6d88\u606f\u5230\u8bb0\u5fc6\uff0c\u8d85\u8fc7\u6700\u5927\u8bb0\u5fc6\u6570\u5219\u5220\u9664\u6700\u65e9\u7684\u6d88\u606f\n\n    Args:\n        message (Dict[str, str]): \u6d88\u606f\n    \"\"\"\n    if isinstance(message, Dict):\n        self.memory.append(message)\n    elif isinstance(message, List):\n        self.memory.extend(message)\n    else:\n        raise ValueError(\"message must be a Dict or List\")\n    if len(self.memory) &gt; self.max_memory:\n        self.memory.pop(0)\n</code></pre>"},{"location":"agent/#mymanus.agent.memory_manager.MemoryManager.clear","title":"clear","text":"Python<pre><code>clear()\n</code></pre> <p>\u6e05\u7a7a\u8bb0\u5fc6</p> Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>def clear(self):\n    \"\"\"\u6e05\u7a7a\u8bb0\u5fc6\"\"\"\n    self.memory = []\n</code></pre>"},{"location":"agent/#mymanus.agent.memory_manager.MemoryManager.get_memory","title":"get_memory","text":"Python<pre><code>get_memory() -&gt; List[Dict[str, str]]\n</code></pre> <p>\u83b7\u53d6\u8bb0\u5fc6</p> Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>def get_memory(self) -&gt; List[Dict[str, str]]:\n    \"\"\"\u83b7\u53d6\u8bb0\u5fc6\"\"\"\n    return self.memory\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager","title":"mymanus.agent.tool_manager","text":""},{"location":"agent/#mymanus.agent.tool_manager.BaseTool","title":"BaseTool  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code>, <code>ABC</code></p> <p>\u57fa\u7840\u5de5\u5177\u7c7b\uff0c\u6240\u6709\u7684\u7c7b\u90fd\u8981\u7ee7\u627f\u8fd9\u4e2a\u7c7b</p> <p>Fields:</p> <ul> <li> <code>tool</code>                 (<code>Any</code>)             </li> <li> <code>tool_name</code>                 (<code>Optional[str]</code>)             </li> <li> <code>tool_description</code>                 (<code>Optional[str]</code>)             </li> <li> <code>tool_schema</code>                 (<code>Optional[Dict[str, Any]]</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>initialize_tool_info</code> </li> </ul> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>class BaseTool(BaseModel, ABC):\n    \"\"\"\u57fa\u7840\u5de5\u5177\u7c7b\uff0c\u6240\u6709\u7684\u7c7b\u90fd\u8981\u7ee7\u627f\u8fd9\u4e2a\u7c7b\n    \"\"\"\n    tool: Any = Field(..., description=\"\u5de5\u5177\")\n    tool_name: Optional[str] = Field(default=None,\n                                     description=\"\u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u8f93\u5165\u4e3aNone\uff0c\u4f1a\u81ea\u52a8\u83b7\u53d6\u5de5\u5177\u540d\u79f0\")\n    tool_description: Optional[str] = Field(\n        default=None, description=\"\u5de5\u5177\u63cf\u8ff0\uff0c\u9ed8\u8ba4\u8f93\u5165\u4e3aNone\uff0c\u4f1a\u81ea\u52a8\u83b7\u53d6\u5de5\u5177\u63cf\u8ff0   \")\n    tool_schema: Optional[Dict[str, Any]] = Field(\n        default=None, description=\"\u5de5\u5177schema\uff0c\u9ed8\u8ba4\u8f93\u5165\u4e3aNone\uff0c\u4f1a\u81ea\u52a8\u83b7\u53d6\u5de5\u5177schema\")\n\n    @model_validator(mode=\"after\")\n    def initialize_tool_info(self) -&gt; \"BaseTool\":\n        \"\"\"\u6709\u4e00\u4e9b\u53c2\u6570\u662fNone\uff0c\u901a\u8fc7model_validator\u673a\u5236\u628a\u9ed8\u8ba4\u4fe1\u606f\u586b\u8fdb\u53bb\uff0c\u521d\u59cb\u5316\u5de5\u5177\u76f8\u5173\u7684\u5c5e\u6027\"\"\"\n        if self.tool_name is None:\n            self.tool_name = self._get_tool_name()\n        if self.tool_description is None:\n            self.tool_description = self._get_tool_description()\n        if self.tool_schema is None:\n            self.tool_schema = self._get_tool_schema()\n        return self\n\n    @abstractmethod\n    async def execute(self, **kwargs) -&gt; Any:\n        \"\"\"\u6267\u884c\u5de5\u5177\"\"\"\n\n    @abstractmethod\n    def _get_tool_name(self) -&gt; str:\n        \"\"\"\u83b7\u53d6\u5de5\u5177\u540d\u79f0\"\"\"\n\n    @abstractmethod\n    def _get_tool_description(self) -&gt; str:\n        \"\"\"\u83b7\u53d6\u5de5\u5177\u63cf\u8ff0\"\"\"\n\n    @abstractmethod\n    def _get_tool_schema(self) -&gt; Dict:\n        \"\"\"\u5c06\u5de5\u5177\u8f6c\u6362\u4e3a\u5de5\u5177schema\uff0c\u7528\u4e8e\u5927\u6a21\u578b\u8c03\u7528\"\"\"\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.BaseTool.tool","title":"tool  <code>pydantic-field</code>","text":"Python<pre><code>tool: Any\n</code></pre> <p>\u5de5\u5177</p>"},{"location":"agent/#mymanus.agent.tool_manager.BaseTool.tool_description","title":"tool_description  <code>pydantic-field</code>","text":"Python<pre><code>tool_description: Optional[str] = None\n</code></pre> <p>\u5de5\u5177\u63cf\u8ff0\uff0c\u9ed8\u8ba4\u8f93\u5165\u4e3aNone\uff0c\u4f1a\u81ea\u52a8\u83b7\u53d6\u5de5\u5177\u63cf\u8ff0</p>"},{"location":"agent/#mymanus.agent.tool_manager.BaseTool.tool_name","title":"tool_name  <code>pydantic-field</code>","text":"Python<pre><code>tool_name: Optional[str] = None\n</code></pre> <p>\u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u8f93\u5165\u4e3aNone\uff0c\u4f1a\u81ea\u52a8\u83b7\u53d6\u5de5\u5177\u540d\u79f0</p>"},{"location":"agent/#mymanus.agent.tool_manager.BaseTool.tool_schema","title":"tool_schema  <code>pydantic-field</code>","text":"Python<pre><code>tool_schema: Optional[Dict[str, Any]] = None\n</code></pre> <p>\u5de5\u5177schema\uff0c\u9ed8\u8ba4\u8f93\u5165\u4e3aNone\uff0c\u4f1a\u81ea\u52a8\u83b7\u53d6\u5de5\u5177schema</p>"},{"location":"agent/#mymanus.agent.tool_manager.BaseTool.execute","title":"execute  <code>abstractmethod</code> <code>async</code>","text":"Python<pre><code>execute(**kwargs) -&gt; Any\n</code></pre> <p>\u6267\u884c\u5de5\u5177</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>@abstractmethod\nasync def execute(self, **kwargs) -&gt; Any:\n    \"\"\"\u6267\u884c\u5de5\u5177\"\"\"\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.BaseTool.initialize_tool_info","title":"initialize_tool_info  <code>pydantic-validator</code>","text":"Python<pre><code>initialize_tool_info() -&gt; BaseTool\n</code></pre> <p>\u6709\u4e00\u4e9b\u53c2\u6570\u662fNone\uff0c\u901a\u8fc7model_validator\u673a\u5236\u628a\u9ed8\u8ba4\u4fe1\u606f\u586b\u8fdb\u53bb\uff0c\u521d\u59cb\u5316\u5de5\u5177\u76f8\u5173\u7684\u5c5e\u6027</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>@model_validator(mode=\"after\")\ndef initialize_tool_info(self) -&gt; \"BaseTool\":\n    \"\"\"\u6709\u4e00\u4e9b\u53c2\u6570\u662fNone\uff0c\u901a\u8fc7model_validator\u673a\u5236\u628a\u9ed8\u8ba4\u4fe1\u606f\u586b\u8fdb\u53bb\uff0c\u521d\u59cb\u5316\u5de5\u5177\u76f8\u5173\u7684\u5c5e\u6027\"\"\"\n    if self.tool_name is None:\n        self.tool_name = self._get_tool_name()\n    if self.tool_description is None:\n        self.tool_description = self._get_tool_description()\n    if self.tool_schema is None:\n        self.tool_schema = self._get_tool_schema()\n    return self\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.FunctionTool","title":"FunctionTool  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseTool</code></p> <p>\u7531python\u51fd\u6570\u6784\u6210\u7684\u5de5\u5177\u63cf\u8ff0\u7c7b\u522b</p> <p>Fields:</p> <ul> <li> <code>tool_name</code>                 (<code>Optional[str]</code>)             </li> <li> <code>tool_description</code>                 (<code>Optional[str]</code>)             </li> <li> <code>tool_schema</code>                 (<code>Optional[Dict[str, Any]]</code>)             </li> <li> <code>tool</code>                 (<code>Callable</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>initialize_tool_info</code> </li> </ul> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>class FunctionTool(BaseTool):\n    \"\"\"\u7531python\u51fd\u6570\u6784\u6210\u7684\u5de5\u5177\u63cf\u8ff0\u7c7b\u522b\n    \"\"\"\n    # \u51fd\u6570\u5de5\u5177\uff0c\u5c31\u8981\u6c42\u662fCallable\u7c7b\u578b\n    tool: Callable = Field(..., description=\"\u51fd\u6570\u5de5\u5177\uff0c\u5c31\u8981\u6c42\u662fCallable\u7c7b\u578b\")\n\n    @override\n    def _get_tool_name(self) -&gt; str:\n        \"\"\"\u83b7\u53d6\u5de5\u5177\u540d\u79f0\"\"\"\n        return self.tool.__name__\n\n    @override\n    def _get_tool_description(self) -&gt; str:\n        \"\"\"\u6309\u7167\u4e0d\u540c\u6ce8\u91ca\u98ce\u683c\uff0cGoogle\u548cNumpy\u98ce\u683c\uff0c\u90fd\u8981\u80fd\u63d0\u53d6tool_description\n\n        Returns:\n            str: \u5de5\u5177\u63cf\u8ff0\n        \"\"\"\n        if not self.tool.__doc__:\n            return \"\"\n\n        doc = self.tool.__doc__\n\n        # \u5904\u7406Google\u98ce\u683c\u6587\u6863\n        if \"Args:\" in doc:\n            # \u53d6Args:\u4e4b\u524d\u7684\u5185\u5bb9\u4f5c\u4e3a\u63cf\u8ff0\n            description = doc.split(\"Args:\")[0].strip()\n            return description\n\n        # \u5904\u7406NumPy\u98ce\u683c\u6587\u6863\n        if \"Parameters\" in doc:\n            # \u53d6Parameters\u4e4b\u524d\u7684\u5185\u5bb9\u4f5c\u4e3a\u63cf\u8ff0\n            description = doc.split(\"Parameters\")[0].strip()\n            return description\n\n        # \u5982\u679c\u90fd\u4e0d\u662f\uff0c\u5c31\u53d6\u7b2c\u4e00\u884c\u4f5c\u4e3a\u63cf\u8ff0\n        return doc.split(\"\\n\")[0].strip()\n\n    def _get_param_type_for_tool_schema(self,\n                                        type_hint: Type) -&gt; Dict[str, Any]:\n        \"\"\"\u83b7\u53d6\u53c2\u6570\u7c7b\u578b\uff0c\u5e76\u8f6c\u6362\u4e3aopenai\u5de5\u5177schema\u517c\u5bb9\u7684\u7c7b\u578b\uff0c\u8003\u8651\u5230\u90e8\u5206\u975e\u6807\u51c6\u5316\u7f16\u7a0b\u7684\u60c5\u51b5\n        \u8fd9\u4e2a\u51fd\u6570\u80fd\u7528\uff0c\u4f46\u7edd\u5bf9\u6ca1\u6709\u6db5\u76d6\u6240\u6709\u60c5\u51b5^_^\n\n        Args:\n            type_hint (Type): \u7531get_type_hints\u51fd\u6570\u83b7\u53d6\u7684\u53c2\u6570\u7684\u3010\u7c7b\u578b\u3011\uff0c\u517c\u5bb9python\u6e90\u751f\u7c7b\u578b\u548ctyping\u7c7b\n\n        Returns:\n            (Dict[str, Any]): \u53c2\u6570\u7c7b\u578bschema\n            \u4f8b\u5982\uff1a\n            {\n                \"type\": \"array\",\n                \"items\": {\n                    \"type\": \"integer\"\n                }\n            }\n        \"\"\"\n        # \u9996\u5148\u5fc5\u987b\u8981\u641e\u6e05\u695aget_origin\u51fd\u6570\u548cget_args\u51fd\u6570\u7684\u4f5c\u7528\n        # get_origin\u51fd\u6570\uff1a\u83b7\u53d6\u7ed9\u4e88typing\u7c7b\u7684\u7c7b\u578b\u63d0\u793a\u7684python\u539f\u59cb\u7c7b\u578b\uff08\u5982list\u3001dict\u3001tuple\u7b49\uff09\uff0c\u4f46\u5982\u679c\u7c7b\u578b\u63d0\u793a\u662fpython\u5185\u7f6e\u7c7b\u578b\u6216\u8005\u5176\u4ed6\u73a9\u610f\uff0c\u5219\u8fd4\u56deNone\u3002\u6b64\u5916\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u578b\u88ab\u5d4c\u5957\u4e86\u591a\u5c11\u5c42\uff0cget_origin\u51fd\u6570\u90fd\u4ec5\u8fd4\u56de\u6700\u5916\u5c42\u7684\u7c7b\u578b\uff0c\u5982List[List[List[int]]]\uff0cget_origin\u51fd\u6570\u4ec5\u8fd4\u56delist\n        # get_args\u51fd\u6570\uff1a\u5982\u679c\u51fa\u73b0\u7c7b\u578b\u5d4c\u5957\uff0c\u5c31\u8fd4\u56de\u5d4c\u5957\u7684\u5168\u90e8\u7c7b\u578b\uff0c\u5982\u679c\u6ca1\u5d4c\u5957\uff0c\u5c31\u8fd4\u56de\u7a7atuple\u3002\u4f8b\u5982List[List[List[int]]]\uff0cget_args\u51fd\u6570\u8fd4\u56de(typing.List[typing.List[int]],)\uff1bDict[str, List[int]]\uff0cget_args\u51fd\u6570\u8fd4\u56de(&lt;class 'str'&gt;, typing.List[int])\u3002\u5bf9\u4e8eLiteral[a, b, c]\uff0cget_args\u51fd\u6570\u8fd4\u56de(a, b, c)\n\n        # \u601d\u8def\uff1a\u7ed3\u5408ori_type\u548cargs_type\u6765\u5904\u7406\u53c2\u6570\u7c7b\u578b\uff0c\u56e0\u4e3a\u5404\u79cd\u5d4c\u5957\u54b1\u4eec\u65e0\u6cd5\u4f30\u8ba1\uff0c\u6240\u4ee5\u91c7\u7528\u9012\u5f52\u662f\u4e00\u4e2a\u597d\u529e\u6cd5\uff0c\u65e2\u7136\u91c7\u7528\u9012\u5f52\uff0c\u90a3\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u7528\u8003\u8651\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5373\u53ef\uff0c\u628a\u539f\u5b50\u5316\u80fd\u529b\u89e3\u51b3\u5b8c\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u9012\u5f52\u8c03\u7528\u81ea\u5df1\n\n        # \u63a5\u4e0b\u6765\u6211\u4eec\u5c31\u7528get_origin\u548cget_args\u6765\n        ori_type = get_origin(type_hint)\n        args_type = get_args(type_hint)\n\n        if ori_type in [list, tuple] or type_hint in [\n                list, tuple\n        ]:  # \u5904\u7406List\u3001List[T]\u3001Tuple\u3001Tuple[T]\uff0cT\u4ee3\u8868\u4efb\u610f\u7c7b\u578b\uff08\u9012\u5f52\u8c03\u7528\u4e0d\u7528\u7ba1T\u5230\u5e95\u662f\u4ec0\u4e48\uff09\n            # \u5224\u65ad\u6709\u6ca1\u6709\u5d4c\u5957\n            # List\u548cTuple\u7684\u5d4c\u5957\u53ea\u4f1a\u6709\u4e00\u4e2a\u53c2\u6570\uff0c\u6bd4\u5982List[str]\u6216List[List[str]]\uff0c\u800c\u4e0d\u53ef\u80fd\u662fList[str, int]\uff0c\u6240\u4ee5args_type = (T,)\uff0cargs_type[0]\u5c31\u80fd\u53d6\u5230\u5143\u7d20\u7684\u7c7b\u578b\n            # List\u662f\u548cTuple\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684items\u5b57\u6bb5\u8868\u660e\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\n            item_type = args_type[0] if args_type else None\n            if item_type:  # \u6709type\u5c31\u52a0\uff0c\u6ca1\u6709type\u5c31\u4e0d\u52a0\u8fd9\u4e2aitems\u5c31\u597d\u4e86\n                return {\n                    \"type\": \"array\",\n                    \"items\": self._get_param_type_for_tool_schema(\n                        item_type)  # \u9012\u5f52\u8c03\u7528\uff0c\u4e07\u4e00\u53c8\u662f\u4e00\u4e2aList\n                }\n            else:\n                return {\"type\": \"array\"}\n        elif ori_type == dict or type_hint == dict:  # \u5904\u7406Dict\u6216Dict[K, V]\u8fd9\u79cd\u60c5\u51b5\n            # \u540c\u6837\u5224\u65ad\u6709\u6ca1\u6709\u5d4c\u5957\uff0cK\u4e0d\u592a\u53ef\u80fd\u5d4c\u5957\uff0c\u4f46V\u8fd8\u53ef\u80fd\u5d4c\u5957\uff0c\u6bd4\u5982Dict[str, List[int]]\n            # \u8fd9\u91ccargs_type = (K, V)\uff0cargs_type[0]\u53d6\u5230K\u7684\u7c7b\u578b\uff0cargs_type[1]\u53d6\u5230V\u7684\u7c7b\u578b\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5206\u6790V\u7684\u7c7b\u578b\n            value_type = args_type[1] if args_type else None\n            if value_type:\n                return {\n                    \"type\":\n                    \"object\",\n                    \"additionalProperties\":\n                    self._get_param_type_for_tool_schema(value_type)\n                }\n            else:\n                return {\"type\": \"object\"}\n        elif ori_type == Literal:  # \u5904\u7406Literal[a, b, c]\u8fd9\u79cd\u60c5\u51b5\uff0ca\u3001b\u3001c\u540c\u79cd\u7c7b\u578b\n            # \u8fd9\u91cc\u7279\u6b8a\uff0ca\u3001b\u3001c\u76f4\u63a5\u653e\u5230enum\u5b57\u6bb5\u91cc\u5c31\u53ef\u4ee5\n            # \u83b7\u5f97a\u3001b\u3001c\u7684\u7c7b\u578b\uff0c\u6ce8\u610f_get_param_type_for_tool_schema\u51fd\u6570\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5b57\u5178\u7684type\u5b57\u6bb5\u624d\u662f\u7c7b\u578b\n            literal_type = self._get_param_type_for_tool_schema(\n                type(args_type[0]))[\"type\"]\n            return {\n                \"type\": literal_type,\n                \"enum\": list(args_type) if args_type else []\n            }\n        elif ori_type == Union:  # \u5904\u7406Union\u6216\u8005Optional\u60c5\u51b5\n            # \u7528anyOf\u6765\u5904\u7406\uff0c\u628a\u6240\u6709\u53ef\u80fd\u7684\u7c7b\u578b\u90fd\u5217\u51fa\u6765\n            return {\n                \"anyOf\": [\n                    self._get_param_type_for_tool_schema(arg)\n                    for arg in args_type\n                ]\n            }\n\n        # \u5230\u76ee\u524d\u4e3a\u6b62\uff0cori_type\u751f\u6210typing\u7c7b\u578b\u7684\u60c5\u51b5\u5c31\u5904\u7406\u5b8c\u4e86\uff0c\u90a3\u5176\u4ed6\u60c5\u51b5\u5927\u6982\u7387\u8fd4\u56de\u5c31\u662fNone\u4e86\uff0c\u6211\u4eec\u65e0\u6cd5\u4eceori_type\u83b7\u53d6\u4fe1\u606f\uff0c\u53ea\u80fd\u4ecetype_hint\u83b7\u53d6\u4fe1\u606f\u4e86\n        # \u4e3a\u5565\u6ca1\u6709list\u548cdict\uff1f\n        if type_hint == int:\n            return {\"type\": \"integer\"}\n        elif type_hint == float:\n            return {\"type\": \"number\"}\n        elif type_hint == bool:\n            return {\"type\": \"boolean\"}\n        elif type_hint == type(None):\n            return {\"type\": \"null\"}\n        elif type_hint == str:\n            return {\"type\": \"string\"}\n        elif type_hint == list:\n            return {\"type\": \"array\"}\n\n        return {\"type\": \"string\"}  # \u4fdd\u5e95\uff01\n\n    def _get_tool_schema(self) -&gt; Dict[str, Any]:\n        \"\"\"tool\u90fd\u662f\u4ee5\u51fd\u6570\u4ee3\u7801\u7684\u5f62\u5f0f\u5b58\u5728\uff0c\u4f46\u5927\u6a21\u578b\u5e76\u4e0d\u80fd\u76f4\u63a5\u8ba4\u8bc6\"\u4ee3\u7801\"\uff0c\u5f97\u628a\u4ee3\u7801\u8f6c\u6210\u5927\u6a21\u578b\u80fd\u8ba4\u8bc6\u7684\u683c\u5f0f\uff08\u901a\u5e38\u90fd\u662fjson\u683c\u5f0f\u5b57\u7b26\u4e32\uff09\uff0c\u4e5f\u5373tool\uff08function\uff09 schema\u3002\n\n        Returns:\n            (Dict[str, Any]): \u5de5\u5177schema\n\n        openai\u63a5\u53e3\u7684\u5de5\u5177schema\u6837\u5f0f\uff08\u5b57\u5178\uff09,\u80cc\u8bf5\u5e76\u9ed8\u5199\uff1a\n        {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_weather\",\n            \"description\": \"Retrieves current weather for the given location.\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"City and country e.g. Bogot\u00e1, Colombia\",\n                    },\n                    \"units\": {\n                        \"type\": \"string\",\n                        \"enum\": [\"celsius\", \"fahrenheit\"],\n                        \"description\": \"Units the temperature will be returned in.\"\n                    }\n                    },\n                    \"required\": [\"location\", \"units\"],\n                    \"additionalProperties\": False\n                },\n            }\n        }\n        \"\"\"\n        # \u6784\u5efa\u4e00\u4e2a\u57fa\u672c\u7684\u5de5\u5177schema\u6a21\u677f\uff0c\u540e\u9762\u7f3a\u5565\u8865\u5565\n        schema_template = {\n            \"type\": \"function\",\n            \"function\": {\n                \"name\": self.tool_name,\n                \"description\": self.tool_description,\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {},  # \u540e\u9762\u83b7\u53d6\u5de5\u5177\u5165\u53c2\u7c7b\u578b\u548c\u63cf\u8ff0\n                    \"required\": [],\n                    \"additionalProperties\": False\n                },\n            }\n        }\n\n        # \u83b7\u53d6\u51fd\u6570\u7b7e\u540d\n        # \u4f8b\u5982\uff1a(location: str, units: Optional[str] = 'celsius') -&gt; str\n        # \u76ee\u6807\u5c31\u662f\u53ef\u4ee5\u904d\u5386\u6240\u6709\u7684\u5165\u53c2 \u95ee\u9898\uff1a\u4e3a\u4ec0\u4e48\u51fa\u53c2\u4e0d\u7528\u5206\u6790\uff1f\n        sig = inspect.signature(self.tool)\n\n        # \u83b7\u53d6\u6240\u6709\u5165\u53c2\u7684\u7c7b\u578b\uff0c\u901a\u8fc7get_type_hints\u51fd\u6570\u83b7\u53d6\u7684\u7c7b\u578b\u53ef\u4ee5\u517c\u5bb9typing\u7c7b\n        # \u4f8b\u5982\uff1a{'location': &lt;class 'str'&gt;, 'units': &lt;class 'typing.Optional'&gt;, 'return': &lt;class 'str'&gt;}\n        # \u7b49\u4ef7\u4e8einspect.get_annotations(self.tool)\n        type_hints = get_type_hints(self.tool)\n\n        # \u904d\u5386\u6240\u6709\u5165\u53c2\n        for param_name, param in sig.parameters.items():\n            param_type = type_hints.get(param_name, Any)\n            # \u5148\u628a\u8fd9\u4e2a\u53c2\u6570\u653e\u5230\u5b57\u5178\u91cc\uff0c\u7136\u540eupdate\u952e\u503c\u5bf9\n            schema_template[\"function\"][\"parameters\"][\"properties\"][\n                param_name] = {}\n            schema_template[\"function\"][\"parameters\"][\"properties\"][\n                param_name].update(\n                    self._get_param_type_for_tool_schema(param_type))\n            schema_template[\"function\"][\"parameters\"][\"properties\"][\n                param_name]['description'] = self._get_param_description(\n                    self.tool, param_name)\n\n            # \u5224\u65ad\u662f\u4e0d\u662f\u5fc5\u8981\u503c\uff0c\u6ca1\u6709\u9ed8\u8ba4\u503c\u5c31\u662f\u5fc5\u8981\u503c\n            if param.default == inspect.Parameter.empty:\n                schema_template[\"function\"][\"parameters\"][\"required\"].append(\n                    param_name)\n            else:\n                schema_template[\"function\"][\"parameters\"][\"properties\"][\n                    param_name]['default'] = param.default\n\n        return schema_template\n\n    def _get_param_description(self, func: Callable, param_name: str) -&gt; str:\n        \"\"\"\u4ece\u51fd\u6570\u6587\u6863\u4e2d\u63d0\u53d6\u51fd\u6570\u7684\u63cf\u8ff0\uff0c\u76ee\u524d\u4ec5\u652f\u6301Google\u98ce\u683c\u6ce8\u91ca\n\n        Args:\n            func (Callable): \u5de5\u5177\u51fd\u6570\n            param_name (str): \u53c2\u6570\u540d\u79f0\n\n        Returns:\n           \u53c2\u6570\u63cf\u8ff0\n        \"\"\"\n        if not func.__doc__:\n            return \"\"\n\n        # \u4ece\u51fd\u6570\u6587\u6863\u4e2d\u63d0\u53d6\u53c2\u6570\u63cf\u8ff0\n        doc = func.__doc__\n        doc_lines = doc.split('\\n')\n\n        # \u5148\u627e\u5230Args\u51fa\u73b0\u7684\u5730\u65b9\uff0c\u7136\u540e\u4e0b\u9762\u6bcf\u884c\u5192\u53f7\u540e\u9762\u90fd\u662f\u53c2\u6570\u7684\u63cf\u8ff0\uff0c\u5192\u53f7\u6709\u53ef\u80fd\u662f\u4e2d\u6587\u7684\u5192\u53f7\u4e5f\u53ef\u80fd\u662f\u82f1\u6587\u7684\u5192\u53f7\n        arg_start_line_index = -1\n        for i, line in enumerate(doc_lines):\n            if 'Args' in line:\n                arg_start_line_index = i\n                break\n\n        if arg_start_line_index == -1:\n            return \"\"\n\n        for i in range(arg_start_line_index + 1, len(doc_lines)):\n            line = doc_lines[i].strip()\n            # \u7a7a\u884c\u8df3\u8fc7\n            if line == '':\n                continue\n\n            # \u5982\u679c\u9047\u5230\u4e0b\u4e00\u4e2a\u4e3b\u8981\u90e8\u5206\uff08\u5982Returns:\uff09\uff0c\u5219\u505c\u6b62\u5faa\u73af\uff0c\u56e0\u4e3a\u53c2\u6570\u4fe1\u606f\u90fd\u6709\u4e86\n            # \u540c\u65f6\u8003\u8651\u4e2d\u6587\u548c\u82f1\u6587\u5192\u53f7\n            if line and not line.startswith(' ') and (line.endswith(':')\n                                                      or line.endswith('\uff1a')):\n                break\n\n            # \u5982\u679c\u9047\u5230\u53c2\u6570\u540d\u79f0\uff0c\u5219\u63d0\u53d6\u53c2\u6570\u540d\u79f0\u540e\u9762\u7684\u5185\u5bb9\uff0c\u540c\u65f6\u8003\u8651\u4e2d\u6587\u548c\u82f1\u6587\u5192\u53f7\n            if line.startswith(param_name):\n                # \u5982\u679c\u5b58\u5728\u4e2d\u6587\u5192\u53f7\uff0c\u5219\u63d0\u53d6\u4e2d\u6587\u5192\u53f7\u540e\u9762\u7684\u5185\u5bb9\n                if '\uff1a' in line:\n                    description = line.split('\uff1a')[-1].strip()\n                else:\n                    description = line.split(':')[-1].strip()\n                return description\n\n        return \"\"\n\n    @override\n    def execute(self, **kwargs) -&gt; Any:\n        \"\"\"\u6267\u884c\u5de5\u5177\"\"\"\n        return self.tool(**kwargs)\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.FunctionTool.tool","title":"tool  <code>pydantic-field</code>","text":"Python<pre><code>tool: Callable\n</code></pre> <p>\u51fd\u6570\u5de5\u5177\uff0c\u5c31\u8981\u6c42\u662fCallable\u7c7b\u578b</p>"},{"location":"agent/#mymanus.agent.tool_manager.FunctionTool.execute","title":"execute","text":"Python<pre><code>execute(**kwargs) -&gt; Any\n</code></pre> <p>\u6267\u884c\u5de5\u5177</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>@override\ndef execute(self, **kwargs) -&gt; Any:\n    \"\"\"\u6267\u884c\u5de5\u5177\"\"\"\n    return self.tool(**kwargs)\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.ToolManager","title":"ToolManager","text":"<p>\u5de5\u5177\u7ba1\u7406\u7c7b\uff0c\u7ba1\u7406\u6240\u6709\u7684\u5de5\u5177\uff0c\u671f\u671b\u5177\u5907\u7684\u529f\u80fd\uff1a 1. \u5de5\u5177\u6ce8\u518c\uff1a\u8ba9\u5de5\u5177\u7ba1\u7406\u5668\u611f\u77e5\u5230\uff0c\u5305\u62ec\u751f\u6210\u5bf9\u5e94\u7684schema\u4fdd\u5b58\u8d77\u6765 2. \u5de5\u5177\u6267\u884c\uff1a\u6267\u884c\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c 3. \u5de5\u5177\u5220\u9664\uff1a\u5220\u9664\u5de5\u5177 4. \u5de5\u5177\u5217\u8868\uff1a\u83b7\u53d6\u6240\u6709\u5de5\u5177\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>tools</code> <code>Dict[str, BaseTool]</code> <p>\u5de5\u5177\u5b57\u5178\uff0ckey\u662f\u5de5\u5177\u540d\u79f0\uff0cvalue\u662f\u5de5\u5177\u5b9e\u4f8b</p> required Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>class ToolManager:\n    \"\"\"\u5de5\u5177\u7ba1\u7406\u7c7b\uff0c\u7ba1\u7406\u6240\u6709\u7684\u5de5\u5177\uff0c\u671f\u671b\u5177\u5907\u7684\u529f\u80fd\uff1a\n    1. \u5de5\u5177\u6ce8\u518c\uff1a\u8ba9\u5de5\u5177\u7ba1\u7406\u5668\u611f\u77e5\u5230\uff0c\u5305\u62ec\u751f\u6210\u5bf9\u5e94\u7684schema\u4fdd\u5b58\u8d77\u6765\n    2. \u5de5\u5177\u6267\u884c\uff1a\u6267\u884c\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\n    3. \u5de5\u5177\u5220\u9664\uff1a\u5220\u9664\u5de5\u5177\n    4. \u5de5\u5177\u5217\u8868\uff1a\u83b7\u53d6\u6240\u6709\u5de5\u5177\u5217\u8868\n\n    Args:\n        tools (Dict[str, BaseTool]): \u5de5\u5177\u5b57\u5178\uff0ckey\u662f\u5de5\u5177\u540d\u79f0\uff0cvalue\u662f\u5de5\u5177\u5b9e\u4f8b\n    \"\"\"\n\n    # \u521d\u59cb\u5316\u7c7b\n    def __init__(self):\n        self.tools: Dict[str, BaseTool] = {}  # \u6bcf\u4e00\u4e2a\u5de5\u5177\u90fd\u662fBaseTool\u5b9e\u4f8b\n\n    # \u5de5\u5177\u6ce8\u518c\uff1a\u8ba9\u5de5\u5177\u7ba1\u7406\u5668\u611f\u77e5\u5230\n    def register_tool(self, tool: Any, tool_name: Optional[str] = None):\n        \"\"\"\u6ce8\u518c\u5de5\u5177\n\n        Args:\n            tool (Any): \u5de5\u5177\uff0c\u5f62\u5f0f\u4e0d\u9650\n            tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f\u51fd\u6570\u540d\n        \"\"\"\n        # \u540e\u9762\u53ef\u80fd\u4f1a\u589e\u52a0\u5de5\u5177\u662f\u7c7b\u7684\u53ef\u80fd\u6027\uff0c\u73b0\u5728\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\n        # \u751f\u6210\u5de5\u5177\u7684\u540d\u79f0\uff0c\u6ca1\u6709\u540d\u79f0\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u7684\u540d\u79f0\n        if tool_name is None:\n            tool_name = tool.__name__\n        elif tool_name in self.tools:\n            warnings.warn(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u5df2\u5b58\u5728\uff0c\u5c06\u8986\u76d6\u539f\u6709\u5de5\u5177\")\n\n        # \u751f\u6210\u5de5\u5177\u7684\u5b9e\u4f8b\n        tool = FunctionTool(tool=tool, tool_name=tool_name)\n        self.tools[tool_name] = tool\n\n    # \u5de5\u5177\u6267\u884c\uff1a\u6267\u884c\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\n    def execute_tool(self, tool_name: str, **kwargs) -&gt; Any:\n        \"\"\"\u6267\u884c\u5de5\u5177\n\n        Args:\n            tool_name (str): \u5de5\u5177\u540d\u79f0\n            **kwargs: \u5de5\u5177\u5165\u53c2\n\n        Returns:\n            (Any): \u5de5\u5177\u8fd4\u56de\u7ed3\u679c\n        \"\"\"\n        if tool_name not in self.tools:\n            raise ValueError(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u4e0d\u5b58\u5728\")\n\n        return self.tools[tool_name].execute(**kwargs)\n\n    # \u5de5\u5177\u5220\u9664\uff1a\u5220\u9664\u5de5\u5177\n    def delete_tool(self, tool_name: str) -&gt; bool:\n        \"\"\"\u5220\u9664\u5de5\u5177\n\n        Args:\n            tool_name (str): \u5de5\u5177\u540d\u79f0\n\n        Returns:\n            (bool): \u662f\u5426\u5220\u9664\u6210\u529f\n        \"\"\"\n        if tool_name in self.tools:\n            del self.tools[tool_name]\n            return True\n\n        return False\n\n    # \u5de5\u5177\u5217\u8868\uff1a\u83b7\u53d6\u6240\u6709\u5de5\u5177\u5217\u8868\n    def get_tool_list(self) -&gt; List[FunctionTool]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u5217\u8868\n\n        Returns:\n            (List[FunctionTool]): \u5de5\u5177\u5217\u8868\n        \"\"\"\n        return list(self.tools.values())\n\n    # \u83b7\u53d6\u6240\u6709\u7684schema\n    def get_tool_schema_list(self) -&gt; List[Dict]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\u7684schema\n\n        Returns:\n            (List[Dict]): \u5de5\u5177schema\u5217\u8868\n        \"\"\"\n        return [tool.tool_schema for tool in self.tools.values()]\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.ToolManager.delete_tool","title":"delete_tool","text":"Python<pre><code>delete_tool(tool_name: str) -&gt; bool\n</code></pre> <p>\u5220\u9664\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>\u5de5\u5177\u540d\u79f0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u5220\u9664\u6210\u529f</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def delete_tool(self, tool_name: str) -&gt; bool:\n    \"\"\"\u5220\u9664\u5de5\u5177\n\n    Args:\n        tool_name (str): \u5de5\u5177\u540d\u79f0\n\n    Returns:\n        (bool): \u662f\u5426\u5220\u9664\u6210\u529f\n    \"\"\"\n    if tool_name in self.tools:\n        del self.tools[tool_name]\n        return True\n\n    return False\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.ToolManager.execute_tool","title":"execute_tool","text":"Python<pre><code>execute_tool(tool_name: str, **kwargs) -&gt; Any\n</code></pre> <p>\u6267\u884c\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>\u5de5\u5177\u540d\u79f0</p> required <code>**kwargs</code> <p>\u5de5\u5177\u5165\u53c2</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>\u5de5\u5177\u8fd4\u56de\u7ed3\u679c</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def execute_tool(self, tool_name: str, **kwargs) -&gt; Any:\n    \"\"\"\u6267\u884c\u5de5\u5177\n\n    Args:\n        tool_name (str): \u5de5\u5177\u540d\u79f0\n        **kwargs: \u5de5\u5177\u5165\u53c2\n\n    Returns:\n        (Any): \u5de5\u5177\u8fd4\u56de\u7ed3\u679c\n    \"\"\"\n    if tool_name not in self.tools:\n        raise ValueError(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u4e0d\u5b58\u5728\")\n\n    return self.tools[tool_name].execute(**kwargs)\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.ToolManager.get_tool_list","title":"get_tool_list","text":"Python<pre><code>get_tool_list() -&gt; List[FunctionTool]\n</code></pre> <p>\u83b7\u53d6\u6240\u6709\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u5217\u8868</p> <p>Returns:</p> Type Description <code>List[FunctionTool]</code> <p>\u5de5\u5177\u5217\u8868</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def get_tool_list(self) -&gt; List[FunctionTool]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u5217\u8868\n\n    Returns:\n        (List[FunctionTool]): \u5de5\u5177\u5217\u8868\n    \"\"\"\n    return list(self.tools.values())\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.ToolManager.get_tool_schema_list","title":"get_tool_schema_list","text":"Python<pre><code>get_tool_schema_list() -&gt; List[Dict]\n</code></pre> <p>\u83b7\u53d6\u6240\u6709\u5de5\u5177\u7684schema</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>\u5de5\u5177schema\u5217\u8868</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def get_tool_schema_list(self) -&gt; List[Dict]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\u7684schema\n\n    Returns:\n        (List[Dict]): \u5de5\u5177schema\u5217\u8868\n    \"\"\"\n    return [tool.tool_schema for tool in self.tools.values()]\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.ToolManager.register_tool","title":"register_tool","text":"Python<pre><code>register_tool(tool: Any, tool_name: Optional[str] = None)\n</code></pre> <p>\u6ce8\u518c\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>Any</code> <p>\u5de5\u5177\uff0c\u5f62\u5f0f\u4e0d\u9650</p> required <code>tool_name</code> <code>Optional[str]</code> <p>\u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f\u51fd\u6570\u540d</p> <code>None</code> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def register_tool(self, tool: Any, tool_name: Optional[str] = None):\n    \"\"\"\u6ce8\u518c\u5de5\u5177\n\n    Args:\n        tool (Any): \u5de5\u5177\uff0c\u5f62\u5f0f\u4e0d\u9650\n        tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f\u51fd\u6570\u540d\n    \"\"\"\n    # \u540e\u9762\u53ef\u80fd\u4f1a\u589e\u52a0\u5de5\u5177\u662f\u7c7b\u7684\u53ef\u80fd\u6027\uff0c\u73b0\u5728\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\n    # \u751f\u6210\u5de5\u5177\u7684\u540d\u79f0\uff0c\u6ca1\u6709\u540d\u79f0\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u7684\u540d\u79f0\n    if tool_name is None:\n        tool_name = tool.__name__\n    elif tool_name in self.tools:\n        warnings.warn(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u5df2\u5b58\u5728\uff0c\u5c06\u8986\u76d6\u539f\u6709\u5de5\u5177\")\n\n    # \u751f\u6210\u5de5\u5177\u7684\u5b9e\u4f8b\n    tool = FunctionTool(tool=tool, tool_name=tool_name)\n    self.tools[tool_name] = tool\n</code></pre>"},{"location":"agent/#mymanus.agent.tool_manager.get_current_weather","title":"get_current_weather  <code>async</code>","text":"Python<pre><code>get_current_weather(location: str, units: Optional[str] = 'celsius', a: int = 1, b: Optional[list] = [1, 2, 3], c: List[int] = [1, 2, 3], d: Literal['a', 'b', 'c'] = 'a', e: Optional[Tuple[int, int]] = (1, 2), f: Dict[str, int] = {'a': 1, 'b': 2}, g: Optional[Union[int, str]] = None, h: Optional[Union[List[int], List[str]]] = [1, 2, 3], i: Union[List[List[List[int]]], int] = [[[1, 2, 3]]]) -&gt; str\n</code></pre> <p>\u83b7\u53d6\u5f53\u524d\u5929\u6c14</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>str</code> <p>\u57ce\u5e02\u540d\u79f0</p> required <code>units</code> <code>Optional[str]</code> <p>\u6e29\u5ea6\u5355\u4f4d\uff0c\u53ef\u9009\u503c\u4e3a\"celsius\"\u6216\"fahrenheit\"\uff0c\u9ed8\u8ba4\u503c\u4e3a\"celsius\"</p> <code>'celsius'</code> <p>Returns:</p> Type Description <code>str</code> <p>\u5929\u6c14\u4fe1\u606f</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>async def get_current_weather(\n        location: str,\n        units: Optional[str] = \"celsius\",\n        a: int = 1,\n        b: Optional[list] = [1, 2, 3],\n        c: List[int] = [1, 2, 3],\n        d: Literal[\"a\", \"b\", \"c\"] = \"a\",\n        e: Optional[Tuple[int, int]] = (1, 2),\n        f: Dict[str, int] = {\n            \"a\": 1,\n            \"b\": 2\n        },\n        g: Optional[Union[int, str]] = None,\n        h: Optional[Union[List[int], List[str]]] = [1, 2, 3],\n        i: Union[List[List[List[int]]], int] = [[[1, 2, 3]]]) -&gt; str:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u5929\u6c14\n\n    Args:\n        location (str): \u57ce\u5e02\u540d\u79f0\n        units (Optional[str]): \u6e29\u5ea6\u5355\u4f4d\uff0c\u53ef\u9009\u503c\u4e3a\"celsius\"\u6216\"fahrenheit\"\uff0c\u9ed8\u8ba4\u503c\u4e3a\"celsius\"\n\n    Returns:\n        \u5929\u6c14\u4fe1\u606f\n    \"\"\"\n    # \u5b9a\u4e49\u5907\u9009\u7684\u5929\u6c14\u6761\u4ef6\u5217\u8868\n    weather_conditions = [\"\u6674\u5929\", \"\u591a\u4e91\", \"\u96e8\u5929\"]\n    # \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u5929\u6c14\u6761\u4ef6\n    random_weather = random.choice(weather_conditions)\n    # \u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6e29\u5ea6\n    random_temperature = random.randint(10, 30)\n    # \u6444\u6c0f\u5ea6\u8f6c\u534e\u6c0f\u5ea6\n    # \u6839\u636eunits\u8fd4\u56de\n    if units == \"celsius\":\n        return f\"{location}\u4eca\u5929\u662f{random_weather}\uff0c\u6e29\u5ea6\u662f{random_temperature}\u5ea6\u3002\"\n    else:\n        random_temperature = random_temperature * 1.8 + 32\n        return f\"{location}\u4eca\u5929\u662f{random_weather}\uff0c\u6e29\u5ea6\u662f{random_temperature}\u534e\u6c0f\u5ea6\u3002\"\n</code></pre>"},{"location":"mymanus/","title":"MyManus","text":""},{"location":"mymanus/#mymanus","title":"mymanus","text":""},{"location":"mymanus/#mymanus.LLM","title":"LLM","text":"<p>\u5927\u6a21\u578b\u7c7b\uff0c\u53ef\u7528\u4e8eagent\u4e2d\u4f5c\u4e3a\u5927\u8111\u7528\u6765\u89c4\u5212\u548c\u6267\u884c\u4efb\u52a1\uff0c\u57fa\u4e8eopenai\u63a5\u53e3\u89c4\u8303</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>\u5927\u6a21\u578bapi key\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u5927\u6a21\u578b\u4f8b\u5982vllm\uff0c\u9700\u8981\u8bbe\u7f6eapi_key\u4e3a\"EMPTY\"\u3002</p> required <code>base_url</code> <code>str</code> <p>\u5927\u6a21\u578bbase url\u3002</p> required <code>model</code> <code>str</code> <p>\u5927\u6a21\u578b\u540d\u79f0\uff0c\u9ed8\u8ba4\"qwen-plus\"\u3002</p> <code>'qwen-plus'</code> <code>tool_choice</code> <code>str</code> <p>\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\"auto\"\u3002</p> <code>'auto'</code> <code>temperature</code> <code>float</code> <p>\u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba40.7\u3002</p> <code>0.7</code> <code>max_tokens</code> <code>int</code> <p>\u6700\u5927tokens\uff0c\u9ed8\u8ba41000\u3002</p> <code>1000</code> <code>stream</code> <code>bool</code> <p>\u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4False\u3002</p> <code>False</code> <code>enable_thinking</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u662fNone\uff0c\u8868\u793a\u8be5\u5927\u6a21\u578b\u4e0d\u5177\u5907\u601d\u8003\u6a21\u5f0f\u5207\u6362\u80fd\u529b\u3002</p> <code>None</code> Source code in <code>src/mymanus/agent/llm.py</code> Python<pre><code>class LLM:\n    \"\"\"\u5927\u6a21\u578b\u7c7b\uff0c\u53ef\u7528\u4e8eagent\u4e2d\u4f5c\u4e3a\u5927\u8111\u7528\u6765\u89c4\u5212\u548c\u6267\u884c\u4efb\u52a1\uff0c\u57fa\u4e8eopenai\u63a5\u53e3\u89c4\u8303\n\n    Args:\n        api_key (str): \u5927\u6a21\u578bapi key\uff0c\u5982\u679c\u662f\u672c\u5730\u90e8\u7f72\u7684\u5927\u6a21\u578b\u4f8b\u5982vllm\uff0c\u9700\u8981\u8bbe\u7f6eapi_key\u4e3a\"EMPTY\"\u3002\n        base_url (str): \u5927\u6a21\u578bbase url\u3002\n        model (str, optional): \u5927\u6a21\u578b\u540d\u79f0\uff0c\u9ed8\u8ba4\"qwen-plus\"\u3002\n        tool_choice (str, optional): \u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\"auto\"\u3002\n        temperature (float, optional): \u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba40.7\u3002\n        max_tokens (int, optional): \u6700\u5927tokens\uff0c\u9ed8\u8ba41000\u3002\n        stream (bool, optional): \u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4False\u3002\n        enable_thinking (bool, optional): \u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u662fNone\uff0c\u8868\u793a\u8be5\u5927\u6a21\u578b\u4e0d\u5177\u5907\u601d\u8003\u6a21\u5f0f\u5207\u6362\u80fd\u529b\u3002\n    \"\"\"\n\n    def __init__(self,\n                 api_key: str,\n                 base_url: str,\n                 model: str = \"qwen-plus\",\n                 tool_choice: Literal[\"auto\", \"required\", \"none\"] = \"auto\",\n                 temperature: float = 0.7,\n                 max_tokens: int = 1000,\n                 stream: bool = False,\n                 enable_thinking: Optional[bool] = None):\n\n        self.client = AsyncOpenAI(api_key=api_key, base_url=base_url)\n        self.model = model\n        self.temperature = temperature\n        self.max_tokens = max_tokens\n        self.tool_choice = tool_choice\n        self.stream = stream\n        self.enable_thinking = enable_thinking\n\n    async def chat(self,\n                   messages: List[Dict],\n                   tools: Optional[List[Dict]] = None,\n                   temperature: Optional[float] = None,\n                   max_tokens: Optional[int] = None,\n                   tool_choice: Optional[Literal[\"auto\", \"required\",\n                                                 \"none\"]] = None,\n                   stream: Optional[bool] = None,\n                   enable_thinking: Optional[bool] = None) -&gt; Dict:\n        \"\"\"\u4e0e\u5927\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u5bf9\u8bdd\n\n        Args:\n            messages (List[Dict]): \u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\n            tools (List[Dict], optional): \u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\uff08function schema\u683c\u5f0f\uff09\u3002 Defaults to None.\n            temperature (float, optional): \u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6e29\u5ea6\u3002\n            max_tokens (int, optional): \u6700\u5927tokens\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6700\u5927tokens\u3002\n            tool_choice (str, optional): \u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\u3002\n            stream (bool, optional): \u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6d41\u5f0f\u8f93\u51fa\u3002\n            enable_thinking (bool, optional): \u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u601d\u8003\u6a21\u5f0f\u3002\n\n        Returns:\n            ChatCompletionMessage: openai\u683c\u5f0f\u7684\u56de\u590d\u7c7b\n        \"\"\"\n        try:\n            # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\uff0c\u5b57\u5178\u5f62\u5f0f\n            request_params = {\n                \"model\": self.model,\n                \"messages\": messages,\n                \"tool_choice\":\n                self.tool_choice if tool_choice is None else tool_choice,\n                \"max_tokens\":\n                self.max_tokens if max_tokens is None else max_tokens,\n                \"temperature\":\n                self.temperature if temperature is None else temperature,\n                \"stream\": self.stream if stream is None else stream,\n            }\n\n            if enable_thinking is not None:\n                request_params[\"extra_body\"] = {\n                    \"enable_thinking\": enable_thinking\n                }\n            elif self.enable_thinking is not None:\n                request_params[\"extra_body\"] = {\n                    \"enable_thinking\": self.enable_thinking\n                }\n\n            # \u5982\u679c\u6709\u5de5\u5177,\u6dfb\u52a0\u5de5\u5177\u76f8\u5173\u53c2\u6570\n            if tools:\n                request_params[\"tools\"] = tools\n\n            # \u8c03\u7528API\n            if not request_params[\"stream\"]:\n                # \u975e\u6d41\u5f0f\u8bf7\u6c42\n                response = await self.client.chat.completions.create(\n                    **request_params)\n                # \u66f4\u65b0\uff1a\u628a\u63a8\u7406\u8fc7\u7a0bprint\u51fa\u6765\u4f46\u4e0d\u4fdd\u5b58\n                print(f\"\u63a8\u7406\u8fc7\u7a0b\uff1a{response.choices[0].message.reasoning_content}\")\n                return response.choices[0].message\n            else:\n                # \u6d41\u5f0f\u8bf7\u6c42\n                response = await self.client.chat.completions.create(\n                    **request_params)\n                collected_content = []\n                collected_tool_calls = []\n                current_tool_call = None\n\n                async for chunk in response:\n                    # \u5904\u7406\u5185\u5bb9\u90e8\u5206\n                    if chunk.choices[0].delta.content:\n                        chunk_content = chunk.choices[0].delta.content\n                        collected_content.append(chunk_content)\n                        print(chunk_content, end=\"\", flush=True)\n                    # \u66f4\u65b0\uff1a\u5904\u7406\u63a8\u7406\u5185\u5bb9\u90e8\u5206\uff0c\u4f46\u6700\u540e\u4e0d\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u8fd4\u56de\u7ed9\u4eba\u770b\u6216\u63d0\u4f9b\u7ed9\u5927\u6a21\u578b\uff0c\u9700\u8981\u786e\u8ba4reasoning_content\u5b57\u6bb5\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u662f\u6bcf\u4e2a\u5927\u6a21\u578b\u90fd\u6709\u8fd9\u4e2a\u5b57\u6bb5\n                    if hasattr(chunk.choices[0].delta, \"reasoning_content\"):\n                        if chunk.choices[0].delta.reasoning_content:\n                            reasoning_content = chunk.choices[\n                                0].delta.reasoning_content\n                            print(reasoning_content, end=\"\", flush=True)\n                    # if chunk.choices[0].delta.reasoning_content:\n                    #     reasoning_content = chunk.choices[\n                    #         0].delta.reasoning_content\n                    #     print(reasoning_content, end=\"\", flush=True)\n\n                    # \u5904\u7406\u5de5\u5177\u8c03\u7528\u90e8\u5206\uff1a\u5de5\u5177\u8c03\u7528\u90e8\u5206\u7b2c\u4e00\u4e2a\u8fd4\u56de\u7684\u6d41\u5f0f\u8f93\u51fa\u5bf9\u8c61\u53ef\u4ee5\u83b7\u5f97\u5de5\u5177\u540d\u79f0\uff08name\uff09\uff0c\u4f46\u5de5\u5177\u7684\u5165\u53c2\u9700\u8981\u62fc\u63a5\n                    if chunk.choices[0].delta.tool_calls:\n                        for tool_call in chunk.choices[0].delta.tool_calls:\n                            # \u65b0\u5de5\u5177\u8c03\u7528\u7684\u5f00\u59cb\n                            if tool_call.index is not None:\n                                # \u5982\u679c\u662f\u65b0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u4fdd\u5b58\u5f53\u524d\u5de5\u5177\u8c03\u7528\u5e76\u521b\u5efa\u65b0\u7684\n                                if current_tool_call is None or tool_call.index != current_tool_call[\n                                        \"index\"]:\n                                    if current_tool_call:\n                                        collected_tool_calls.append(\n                                            current_tool_call)\n                                    current_tool_call = {\n                                        \"id\": tool_call.id or \"\",\n                                        \"type\": \"function\",\n                                        \"index\": tool_call.index,\n                                        \"function\": {\n                                            \"name\": \"\",\n                                            \"arguments\": \"\"\n                                        }\n                                    }\n\n                            # \u66f4\u65b0\u5de5\u5177\u540d\u79f0\uff08\u5b9e\u9645\u4e0a\u53ea\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u65f6\u8bbe\u7f6e\uff09\n                            if tool_call.function and tool_call.function.name:\n                                current_tool_call[\"function\"][\n                                    \"name\"] = tool_call.function.name\n                            # \u66f4\u65b0\u5de5\u5177\u53c2\u6570\uff08\u9700\u8981\u62fc\u63a5\uff09\n                            if tool_call.function and tool_call.function.arguments:\n                                current_tool_call[\"function\"][\n                                    \"arguments\"] += tool_call.function.arguments\n\n                # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u5de5\u5177\u8c03\u7528\n                if current_tool_call:\n                    collected_tool_calls.append(current_tool_call)\n\n                # \u628a\u5b57\u5178\u8f6c\u6362\u4e3aopenai\u7684ChatCompletionMessage\u5bf9\u8c61\n                return ChatCompletionMessage(\n                    role=\"assistant\",\n                    content=\"\".join(collected_content).strip()\n                    if collected_content else \"\",\n                    tool_calls=collected_tool_calls\n                    if collected_tool_calls else None)\n\n        except Exception as e:\n            raise Exception(f\"\u8c03\u7528\u5927\u6a21\u578bAPI\u5931\u8d25: {str(e)}\")\n</code></pre>"},{"location":"mymanus/#mymanus.LLM.chat","title":"chat  <code>async</code>","text":"Python<pre><code>chat(messages: List[Dict], tools: Optional[List[Dict]] = None, temperature: Optional[float] = None, max_tokens: Optional[int] = None, tool_choice: Optional[Literal['auto', 'required', 'none']] = None, stream: Optional[bool] = None, enable_thinking: Optional[bool] = None) -&gt; Dict\n</code></pre> <p>\u4e0e\u5927\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u5bf9\u8bdd</p> <p>Parameters:</p> Name Type Description Default <code>messages</code> <code>List[Dict]</code> <p>\u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55</p> required <code>tools</code> <code>List[Dict]</code> <p>\u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\uff08function schema\u683c\u5f0f\uff09\u3002 Defaults to None.</p> <code>None</code> <code>temperature</code> <code>float</code> <p>\u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6e29\u5ea6\u3002</p> <code>None</code> <code>max_tokens</code> <code>int</code> <p>\u6700\u5927tokens\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6700\u5927tokens\u3002</p> <code>None</code> <code>tool_choice</code> <code>str</code> <p>\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\u3002</p> <code>None</code> <code>stream</code> <code>bool</code> <p>\u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6d41\u5f0f\u8f93\u51fa\u3002</p> <code>None</code> <code>enable_thinking</code> <code>bool</code> <p>\u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u601d\u8003\u6a21\u5f0f\u3002</p> <code>None</code> <p>Returns:</p> Name Type Description <code>ChatCompletionMessage</code> <code>Dict</code> <p>openai\u683c\u5f0f\u7684\u56de\u590d\u7c7b</p> Source code in <code>src/mymanus/agent/llm.py</code> Python<pre><code>async def chat(self,\n               messages: List[Dict],\n               tools: Optional[List[Dict]] = None,\n               temperature: Optional[float] = None,\n               max_tokens: Optional[int] = None,\n               tool_choice: Optional[Literal[\"auto\", \"required\",\n                                             \"none\"]] = None,\n               stream: Optional[bool] = None,\n               enable_thinking: Optional[bool] = None) -&gt; Dict:\n    \"\"\"\u4e0e\u5927\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u5bf9\u8bdd\n\n    Args:\n        messages (List[Dict]): \u5bf9\u8bdd\u5386\u53f2\u8bb0\u5f55\n        tools (List[Dict], optional): \u53ef\u7528\u7684\u5de5\u5177\u5217\u8868\uff08function schema\u683c\u5f0f\uff09\u3002 Defaults to None.\n        temperature (float, optional): \u6e29\u5ea6\uff0c\u63a7\u5236\u5927\u6a21\u578b\u751f\u6210\u7ed3\u679c\u7684\u968f\u673a\u6027\uff0c\u8d8a\u5927\u968f\u673a\u6027\u8d8a\u5f3a\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6e29\u5ea6\u3002\n        max_tokens (int, optional): \u6700\u5927tokens\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6700\u5927tokens\u3002\n        tool_choice (str, optional): \u5de5\u5177\u9009\u62e9\u6a21\u5f0f\uff0c\u5305\u62ec\"auto\", \"required\", \"none\"\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u5de5\u5177\u9009\u62e9\u6a21\u5f0f\u3002\n        stream (bool, optional): \u662f\u5426\u6d41\u5f0f\u8f93\u51fa\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u6d41\u5f0f\u8f93\u51fa\u3002\n        enable_thinking (bool, optional): \u662f\u5426\u542f\u7528\u5927\u6a21\u578b\u601d\u8003\u6a21\u5f0f\uff0c\u4ec5\u5728\u4f7f\u7528qwen3\u6a21\u578b\u65f6\u6709\u6548\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7c7b\u521d\u59cb\u5316\u65f6\u7684\u601d\u8003\u6a21\u5f0f\u3002\n\n    Returns:\n        ChatCompletionMessage: openai\u683c\u5f0f\u7684\u56de\u590d\u7c7b\n    \"\"\"\n    try:\n        # \u6784\u5efa\u8bf7\u6c42\u53c2\u6570\uff0c\u5b57\u5178\u5f62\u5f0f\n        request_params = {\n            \"model\": self.model,\n            \"messages\": messages,\n            \"tool_choice\":\n            self.tool_choice if tool_choice is None else tool_choice,\n            \"max_tokens\":\n            self.max_tokens if max_tokens is None else max_tokens,\n            \"temperature\":\n            self.temperature if temperature is None else temperature,\n            \"stream\": self.stream if stream is None else stream,\n        }\n\n        if enable_thinking is not None:\n            request_params[\"extra_body\"] = {\n                \"enable_thinking\": enable_thinking\n            }\n        elif self.enable_thinking is not None:\n            request_params[\"extra_body\"] = {\n                \"enable_thinking\": self.enable_thinking\n            }\n\n        # \u5982\u679c\u6709\u5de5\u5177,\u6dfb\u52a0\u5de5\u5177\u76f8\u5173\u53c2\u6570\n        if tools:\n            request_params[\"tools\"] = tools\n\n        # \u8c03\u7528API\n        if not request_params[\"stream\"]:\n            # \u975e\u6d41\u5f0f\u8bf7\u6c42\n            response = await self.client.chat.completions.create(\n                **request_params)\n            # \u66f4\u65b0\uff1a\u628a\u63a8\u7406\u8fc7\u7a0bprint\u51fa\u6765\u4f46\u4e0d\u4fdd\u5b58\n            print(f\"\u63a8\u7406\u8fc7\u7a0b\uff1a{response.choices[0].message.reasoning_content}\")\n            return response.choices[0].message\n        else:\n            # \u6d41\u5f0f\u8bf7\u6c42\n            response = await self.client.chat.completions.create(\n                **request_params)\n            collected_content = []\n            collected_tool_calls = []\n            current_tool_call = None\n\n            async for chunk in response:\n                # \u5904\u7406\u5185\u5bb9\u90e8\u5206\n                if chunk.choices[0].delta.content:\n                    chunk_content = chunk.choices[0].delta.content\n                    collected_content.append(chunk_content)\n                    print(chunk_content, end=\"\", flush=True)\n                # \u66f4\u65b0\uff1a\u5904\u7406\u63a8\u7406\u5185\u5bb9\u90e8\u5206\uff0c\u4f46\u6700\u540e\u4e0d\u4f5c\u4e3a\u4e0a\u4e0b\u6587\u8fd4\u56de\u7ed9\u4eba\u770b\u6216\u63d0\u4f9b\u7ed9\u5927\u6a21\u578b\uff0c\u9700\u8981\u786e\u8ba4reasoning_content\u5b57\u6bb5\u662f\u5426\u5b58\u5728\uff0c\u4e0d\u662f\u6bcf\u4e2a\u5927\u6a21\u578b\u90fd\u6709\u8fd9\u4e2a\u5b57\u6bb5\n                if hasattr(chunk.choices[0].delta, \"reasoning_content\"):\n                    if chunk.choices[0].delta.reasoning_content:\n                        reasoning_content = chunk.choices[\n                            0].delta.reasoning_content\n                        print(reasoning_content, end=\"\", flush=True)\n                # if chunk.choices[0].delta.reasoning_content:\n                #     reasoning_content = chunk.choices[\n                #         0].delta.reasoning_content\n                #     print(reasoning_content, end=\"\", flush=True)\n\n                # \u5904\u7406\u5de5\u5177\u8c03\u7528\u90e8\u5206\uff1a\u5de5\u5177\u8c03\u7528\u90e8\u5206\u7b2c\u4e00\u4e2a\u8fd4\u56de\u7684\u6d41\u5f0f\u8f93\u51fa\u5bf9\u8c61\u53ef\u4ee5\u83b7\u5f97\u5de5\u5177\u540d\u79f0\uff08name\uff09\uff0c\u4f46\u5de5\u5177\u7684\u5165\u53c2\u9700\u8981\u62fc\u63a5\n                if chunk.choices[0].delta.tool_calls:\n                    for tool_call in chunk.choices[0].delta.tool_calls:\n                        # \u65b0\u5de5\u5177\u8c03\u7528\u7684\u5f00\u59cb\n                        if tool_call.index is not None:\n                            # \u5982\u679c\u662f\u65b0\u7684\u5de5\u5177\u8c03\u7528\uff0c\u4fdd\u5b58\u5f53\u524d\u5de5\u5177\u8c03\u7528\u5e76\u521b\u5efa\u65b0\u7684\n                            if current_tool_call is None or tool_call.index != current_tool_call[\n                                    \"index\"]:\n                                if current_tool_call:\n                                    collected_tool_calls.append(\n                                        current_tool_call)\n                                current_tool_call = {\n                                    \"id\": tool_call.id or \"\",\n                                    \"type\": \"function\",\n                                    \"index\": tool_call.index,\n                                    \"function\": {\n                                        \"name\": \"\",\n                                        \"arguments\": \"\"\n                                    }\n                                }\n\n                        # \u66f4\u65b0\u5de5\u5177\u540d\u79f0\uff08\u5b9e\u9645\u4e0a\u53ea\u5728\u7b2c\u4e00\u6b21\u83b7\u53d6\u65f6\u8bbe\u7f6e\uff09\n                        if tool_call.function and tool_call.function.name:\n                            current_tool_call[\"function\"][\n                                \"name\"] = tool_call.function.name\n                        # \u66f4\u65b0\u5de5\u5177\u53c2\u6570\uff08\u9700\u8981\u62fc\u63a5\uff09\n                        if tool_call.function and tool_call.function.arguments:\n                            current_tool_call[\"function\"][\n                                \"arguments\"] += tool_call.function.arguments\n\n            # \u6dfb\u52a0\u6700\u540e\u4e00\u4e2a\u5de5\u5177\u8c03\u7528\n            if current_tool_call:\n                collected_tool_calls.append(current_tool_call)\n\n            # \u628a\u5b57\u5178\u8f6c\u6362\u4e3aopenai\u7684ChatCompletionMessage\u5bf9\u8c61\n            return ChatCompletionMessage(\n                role=\"assistant\",\n                content=\"\".join(collected_content).strip()\n                if collected_content else \"\",\n                tool_calls=collected_tool_calls\n                if collected_tool_calls else None)\n\n    except Exception as e:\n        raise Exception(f\"\u8c03\u7528\u5927\u6a21\u578bAPI\u5931\u8d25: {str(e)}\")\n</code></pre>"},{"location":"mymanus/#mymanus.MemoryManager","title":"MemoryManager  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>\u8bb0\u5fc6\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u5b58\u50a8\u5bf9\u8bdd\u5386\u53f2</p> <p>Fields:</p> <ul> <li> <code>memory</code>                 (<code>List[Dict[str, str]]</code>)             </li> <li> <code>max_memory</code>                 (<code>int</code>)             </li> </ul> Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>class MemoryManager(BaseModel):\n    \"\"\"\u8bb0\u5fc6\u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u5b58\u50a8\u5bf9\u8bdd\u5386\u53f2\n    \"\"\"\n    memory: List[Dict[str, str]] = Field(default_factory=list,\n                                         description=\"\u8bb0\u5fc6\")\n    max_memory: int = Field(default=10, description=\"\u6700\u5927\u8bb0\u5fc6\u6570\")\n\n    def add_message(self, message: Union[Dict[str, str], List[Dict[str,\n                                                                   str]]]):\n        \"\"\"\u6dfb\u52a0\u4e00\u6761\u6d88\u606f\u5230\u8bb0\u5fc6\uff0c\u8d85\u8fc7\u6700\u5927\u8bb0\u5fc6\u6570\u5219\u5220\u9664\u6700\u65e9\u7684\u6d88\u606f\n\n        Args:\n            message (Dict[str, str]): \u6d88\u606f\n        \"\"\"\n        if isinstance(message, Dict):\n            self.memory.append(message)\n        elif isinstance(message, List):\n            self.memory.extend(message)\n        else:\n            raise ValueError(\"message must be a Dict or List\")\n        if len(self.memory) &gt; self.max_memory:\n            self.memory.pop(0)\n\n    def get_memory(self) -&gt; List[Dict[str, str]]:\n        \"\"\"\u83b7\u53d6\u8bb0\u5fc6\"\"\"\n        return self.memory\n\n    def clear(self):\n        \"\"\"\u6e05\u7a7a\u8bb0\u5fc6\"\"\"\n        self.memory = []\n</code></pre>"},{"location":"mymanus/#mymanus.MemoryManager.max_memory","title":"max_memory  <code>pydantic-field</code>","text":"Python<pre><code>max_memory: int = 10\n</code></pre> <p>\u6700\u5927\u8bb0\u5fc6\u6570</p>"},{"location":"mymanus/#mymanus.MemoryManager.memory","title":"memory  <code>pydantic-field</code>","text":"Python<pre><code>memory: List[Dict[str, str]]\n</code></pre> <p>\u8bb0\u5fc6</p>"},{"location":"mymanus/#mymanus.MemoryManager.add_message","title":"add_message","text":"Python<pre><code>add_message(message: Union[Dict[str, str], List[Dict[str, str]]])\n</code></pre> <p>\u6dfb\u52a0\u4e00\u6761\u6d88\u606f\u5230\u8bb0\u5fc6\uff0c\u8d85\u8fc7\u6700\u5927\u8bb0\u5fc6\u6570\u5219\u5220\u9664\u6700\u65e9\u7684\u6d88\u606f</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Dict[str, str]</code> <p>\u6d88\u606f</p> required Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>def add_message(self, message: Union[Dict[str, str], List[Dict[str,\n                                                               str]]]):\n    \"\"\"\u6dfb\u52a0\u4e00\u6761\u6d88\u606f\u5230\u8bb0\u5fc6\uff0c\u8d85\u8fc7\u6700\u5927\u8bb0\u5fc6\u6570\u5219\u5220\u9664\u6700\u65e9\u7684\u6d88\u606f\n\n    Args:\n        message (Dict[str, str]): \u6d88\u606f\n    \"\"\"\n    if isinstance(message, Dict):\n        self.memory.append(message)\n    elif isinstance(message, List):\n        self.memory.extend(message)\n    else:\n        raise ValueError(\"message must be a Dict or List\")\n    if len(self.memory) &gt; self.max_memory:\n        self.memory.pop(0)\n</code></pre>"},{"location":"mymanus/#mymanus.MemoryManager.clear","title":"clear","text":"Python<pre><code>clear()\n</code></pre> <p>\u6e05\u7a7a\u8bb0\u5fc6</p> Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>def clear(self):\n    \"\"\"\u6e05\u7a7a\u8bb0\u5fc6\"\"\"\n    self.memory = []\n</code></pre>"},{"location":"mymanus/#mymanus.MemoryManager.get_memory","title":"get_memory","text":"Python<pre><code>get_memory() -&gt; List[Dict[str, str]]\n</code></pre> <p>\u83b7\u53d6\u8bb0\u5fc6</p> Source code in <code>src/mymanus/agent/memory_manager.py</code> Python<pre><code>def get_memory(self) -&gt; List[Dict[str, str]]:\n    \"\"\"\u83b7\u53d6\u8bb0\u5fc6\"\"\"\n    return self.memory\n</code></pre>"},{"location":"mymanus/#mymanus.ToolCallingAgent","title":"ToolCallingAgent  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseAgent</code></p> <p>ToolCallingAgent\uff0c\u7531\u5de5\u5177\u3001\u8bb0\u5fc6\u3001\u89c4\u5212\u3001\u611f\u77e5\u7b49\u6a21\u5757\u6784\u5efa\uff0c\u54b1\u4eec\u4e00\u4e2a\u4e00\u4e2a\u6765\u5b9e\u73b0</p> <p>ToolCallingAgent\u7279\u70b9\uff1a     - \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u667a\u80fd\u4f53     - \u667a\u80fd\u4f53\u89c4\u5212\u7531\u4e00\u4e2a\u7b80\u5355\u5927\u6a21\u578b\u5b9e\u73b0     - \u53ea\u5305\u542b\u5de5\u5177\u6a21\u5757\u548c\u8bb0\u5fc6\u6a21\u5757     - \u5177\u5907React\u6846\u67b6\uff0c\u5148think\uff0c\u518dact     - \u652f\u6301\u57fa\u672c\u7684\u5bf9\u8bdd\u529f\u80fd     - \u652f\u6301\u5de5\u5177\u8c03\u7528     - \u540e\u7eed\u7684\u667a\u80fd\u4f53\u53ef\u4ee5\u7ee7\u627f\u8fd9\u4e2a\u57fa\u5ea7\u667a\u80fd\u4f53\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd</p> <p>Parameters:</p> Name Type Description Default <code>llm</code> <code>LLM</code> <p>\u5927\u6a21\u578b\u5b9e\u4f8b\uff0c\u5728\u8fd9\u91cc\u4e3b\u8981\u7528\u4e8e\u4efb\u52a1\u89c4\u5212\uff08\u7ee7\u627f\u81eaBaseAgent\uff09</p> required <code>tool_manager</code> <code>ToolManager</code> <p>\u5de5\u5177\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09</p> required <code>memory_manager</code> <code>MemoryManager</code> <p>\u8bb0\u5fc6\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09</p> required <code>max_step</code> <code>int</code> <p>\u6700\u5927\u6b65\u9aa4\uff0c\u9ed8\u8ba410</p> required <p>Fields:</p> <ul> <li> <code>llm</code>                 (<code>LLM</code>)             </li> <li> <code>tool_manager</code>                 (<code>ToolManager</code>)             </li> <li> <code>memory_manager</code>                 (<code>MemoryManager</code>)             </li> <li> <code>max_step</code>                 (<code>int</code>)             </li> <li> <code>next_step_prompt</code>                 (<code>str</code>)             </li> <li> <code>final_step_prompt</code>                 (<code>str</code>)             </li> </ul> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>class ToolCallingAgent(BaseAgent):\n    \"\"\"ToolCallingAgent\uff0c\u7531\u5de5\u5177\u3001\u8bb0\u5fc6\u3001\u89c4\u5212\u3001\u611f\u77e5\u7b49\u6a21\u5757\u6784\u5efa\uff0c\u54b1\u4eec\u4e00\u4e2a\u4e00\u4e2a\u6765\u5b9e\u73b0\n\n    ToolCallingAgent\u7279\u70b9\uff1a\n        - \u4e00\u4e2a\u6700\u7b80\u5355\u7684\u667a\u80fd\u4f53\n        - \u667a\u80fd\u4f53\u89c4\u5212\u7531\u4e00\u4e2a\u7b80\u5355\u5927\u6a21\u578b\u5b9e\u73b0\n        - \u53ea\u5305\u542b\u5de5\u5177\u6a21\u5757\u548c\u8bb0\u5fc6\u6a21\u5757\n        - \u5177\u5907React\u6846\u67b6\uff0c\u5148think\uff0c\u518dact\n        - \u652f\u6301\u57fa\u672c\u7684\u5bf9\u8bdd\u529f\u80fd\n        - \u652f\u6301\u5de5\u5177\u8c03\u7528\n        - \u540e\u7eed\u7684\u667a\u80fd\u4f53\u53ef\u4ee5\u7ee7\u627f\u8fd9\u4e2a\u57fa\u5ea7\u667a\u80fd\u4f53\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\n\n    Args:\n        llm (LLM): \u5927\u6a21\u578b\u5b9e\u4f8b\uff0c\u5728\u8fd9\u91cc\u4e3b\u8981\u7528\u4e8e\u4efb\u52a1\u89c4\u5212\uff08\u7ee7\u627f\u81eaBaseAgent\uff09\n        tool_manager (ToolManager): \u5de5\u5177\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09\n        memory_manager (MemoryManager): \u8bb0\u5fc6\u7ba1\u7406\u5668\uff08\u7ee7\u627f\u81eaBaseAgent\uff09\n        max_step (int): \u6700\u5927\u6b65\u9aa4\uff0c\u9ed8\u8ba410\n    \"\"\"\n    max_step: int = Field(default=10, description=\"\u6700\u5927\u6b65\u9aa4\")\n    next_step_prompt: str = Field(default=NEXT_STEP_PROMPT,\n                                  description=\"\u4e0b\u4e00\u6b65\u63d0\u793a\")\n    final_step_prompt: str = Field(default=FINAL_STEP_PROMPT,\n                                   description=\"\u6700\u540e\u4e00\u6b65\u63d0\u793a\")\n\n    # React\u6846\u67b6\uff0c\u5148think\uff08reasoning\uff09\uff0c\u518dact\n    async def think(self, message: List[Dict]) -&gt; bool:\n        \"\"\"\u4f7f\u7528\u5927\u6a21\u578b\u8fdb\u884c\u601d\u8003\uff0c\u8fd4\u56de\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n\n        Args:\n            message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n        Returns:\n            bool: \u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n        \"\"\"\n        # \u6dfb\u52a0\u7ec8\u6b62\u63d0\u793a\n        message.append({\"role\": \"user\", \"content\": self.next_step_prompt})\n        response = await self.llm.chat(\n            messages=message, tools=self.tool_manager.get_tool_schema_list())\n\n        # \u56de\u590d\u5185\u5bb9\u5168\u90e8\u52a0\u5165\u8bb0\u5fc6\u6a21\u5757\uff0c\u52a0\u5165\u7684\u5f97\u662f\u5b57\u5178\n        self.memory_manager.add_message(response.model_dump())\n        # \u6253\u5370\u56de\u590d\u5185\u5bb9\uff0c\u6d41\u5f0f\u8f93\u51fa\u4f1a\u81ea\u52a8\u6253\u5370\uff0c\u4e0d\u5fc5\u8981\u91cd\u590d\u6253\u5370\n        if response.content and not self.llm.stream:\n            logger.info(f\"\u667a\u80fd\u4f53\u56de\u590d\uff1a{response.content}\")\n        # \u5224\u65ad\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n        if response.tool_calls:\n            return True\n        else:\n            return False\n\n    async def act(self, message: List[Dict]) -&gt; bool:\n        \"\"\"\u8c03\u7528\u5bf9\u5e94\u5de5\u5177\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5c06\u8fd4\u56de\u7ed3\u6784\u901a\u8fc7assistant message\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e00\u65e6\u8c03\u7528\u5de5\u5177\u8fd8\u9700\u8981\u53cd\u9988assistant message\uff0c\u8981\u628a\u51fd\u6570\u8fd0\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u5927\u6a21\u578b\u505a\u4e0b\u4e00\u6b65\u7684\u8ba1\u5212\n\n        Args:\n            message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n        Returns:\n            bool: \u662f\u5426\u6267\u884c\u5b8c\u6240\u6709\u7684\u5de5\u5177\n        \"\"\"\n\n        # \u6839\u636e\u8bb0\u5fc6\u8bfb\u53d6\u6700\u65b0\u7684\u56de\u590d\uff0c\u6839\u636etool_calls\u987a\u5e8f\u6267\u884c\u5de5\u5177\uff0c\u8fd4\u56de\u7684\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5de5\u5177\n        for tool_call in message[\"tool_calls\"]:\n\n            # \u62ff\u5230\u8c03\u7528\u5de5\u5177\u7684\u540d\u79f0\u3001\u5165\u53c2\u3001id\u3001index\n            tool_name = tool_call[\"function\"][\"name\"]\n            tool_arguments = tool_call[\"function\"][\"arguments\"]\n            tool_id = tool_call[\"id\"]\n\n            # \u6267\u884c\u5de5\u5177\n            logger.info(f\"\u8c03\u7528\u5de5\u5177\uff1a{tool_name}\uff0c\u5165\u53c2\uff1a{tool_arguments}\")\n            try:\n                # \u5982\u679ctool_arguments\u4e3a\u7a7a\u5b57\u5178\uff0c\u5219\u4e0d\u4f20\u5165\u53c2\u6570\n                if tool_arguments == \"{}\":\n                    tool_result = await self.tool_manager.execute_tool(\n                        tool_name)\n                else:\n                    # \u5c06tool_arguments\u8f6c\u6362\u4e3a\u5b57\u5178\n                    tool_arguments = json.loads(tool_arguments)\n                    tool_result = await self.tool_manager.execute_tool(\n                        tool_name, **tool_arguments)\n                logger.info(f\"\u5de5\u5177{tool_name}\u6267\u884c\u6210\u529f\")\n\n                # \u7136\u540e\u662f\u4e00\u4e2atool message\n                tool_message = {\n                    \"role\": \"tool\",\n                    \"content\": tool_result,\n                    \"tool_call_id\": tool_id,\n                }\n                self.memory_manager.add_message(tool_message)\n\n                if tool_call[\"function\"][\"name\"] == \"terminate\":\n                    logger.warning(f\"\u667a\u80fd\u4f53\u8ba4\u4e3a\u4efb\u52a1\u5b8c\u6210\uff0c\u7ec8\u6b62\u5de5\u5177\u8c03\u7528\")\n                    return True\n\n            except Exception as e:\n                logger.error(f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{e}\")\n                # \u5c06\u9519\u8bef\u4fe1\u606f\u544a\u77e5\u5927\u6a21\u578b\n                assistant_message = {\n                    \"content\": f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u8003\u8651\u8c03\u7528\u5176\u4ed6\u5de5\u5177\",\n                    \"refusal\": None,\n                    \"role\": \"assistant\",\n                    \"audio\": None,\n                    \"function_call\": None,\n                    \"tool_calls\": None,\n                }\n                self.memory_manager.add_message(assistant_message)\n        # \u8fd4\u56de\u7ed3\u679c\n        return False\n\n    async def run_step(self, message: List[Dict]):\n        \"\"\"\u8fd0\u884c\u4e00\u4e2areact\u6b65\u9aa4\uff0c\u5305\u62ec\u4e00\u6b21think\u548c\u4e00\u6b21act\n\n        Args:\n            message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n        Returns:\n            bool: \u662f\u5426\u662f\u6700\u540e\u4e00\u6b65\uff0c\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6\n        \"\"\"\n\n        # \u601d\u8003\n        logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u601d\u8003\u2026\u2026\")\n        should_act = await self.think(message)\n        if should_act:\n            # \u884c\u52a8\n            # \u83b7\u53d6\u6700\u65b0\u7684message\n            logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u884c\u52a8\u2026\u2026\")\n            current_message = self.memory_manager.get_memory()[-1]\n            should_terminate = await self.act(current_message)\n            if should_terminate:\n                return True\n            else:\n                return False\n        else:\n            return False\n\n    async def run(self, message: List[Dict]):\n        \"\"\"\u8fd0\u884c\u5b8c\u6574\u8f6e\u6570\u7684react\u8fc7\u7a0b\n\n        Args:\n            message (List[Dict]): \u7528\u6237\u7684\u4e00\u53e5\u8bddquery\n        \"\"\"\n\n        # \u7528\u6237\u95ee\u9898\u672c\u8eab\u4e5f\u8981\u52a0\u5230\u8bb0\u5fc6\u91cc\u9762\n        self.memory_manager.add_message(message)\n        step = 0\n        while step &lt; self.max_step:\n            logger.warning(f\"\u6b63\u5728\u6267\u884c\u7b2c{step+1}\u6b65\u2026\u2026\")\n            # \u8f93\u5165\u5168\u91cf\u7684message\n            final_step = await self.run_step(self.memory_manager.get_memory())\n            if final_step:\n                break\n            step += 1\n\n        # \u6700\u540e\u4e00\u6b65\u8981\u7efc\u5408\u9664\u4e86\u6700\u540e\u4e00\u8f6e\u4fe1\u606f\u7ed9\u7528\u6237\u4e00\u4e2a\u603b\u7ed3\u6027\u7684\u56de\u590d\uff0c\u8fd8\u9700\u8981\u548c\u5927\u6a21\u578b\u505a\u4e00\u6b21\u5bf9\u8bdd\n        if final_step:\n\n            final_message = {\"role\": \"user\", \"content\": self.final_step_prompt}\n            # \u6ce8\u610f\u5728\u8c03\u7528terminate\u5de5\u5177\u7684\u540c\u65f6\u8fd8\u53ef\u80fd\u6709\u8f93\u51fa\uff0c\u5f97\u628aterminate\u5f53\u6210\u4e00\u4e2a\u666e\u901a\u5de5\u5177\u5bf9\u5f85\n            # \u628afinal_message\u52a0\u5165\u5230memory\u5f53\u4e2d\n            self.memory_manager.add_message(final_message)\n\n            logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u603b\u7ed3\u7b54\u6848\u2026\u2026\")\n            # \u8fd9\u91cc\u6709\u4e00\u4e2a\u7279\u522b\u5751\u7684\u5730\u65b9\uff0c\u5c31\u662ftools\u5fc5\u987b\u5168\u7a0b\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u5927\u6a21\u578b\u81ea\u52a8\u8fdb\u5165\u65b0\u7684\u95ee\u7b54\uff0c\u65e0\u6cd5\u7ed3\u5408\u4e0a\u4e0b\u6587\u4fe1\u606f\u5206\u6790\u4e86\n            final_response = await self.llm.chat(\n                messages=self.memory_manager.get_memory(),\n                tool_choice=\"none\",\n                tools=self.tool_manager.get_tool_schema_list())\n            self.memory_manager.add_message(final_response.model_dump())\n            # \u7a7a\u4e00\u884c\n            print()\n            logger.warning(f\"\u667a\u80fd\u4f53\u603b\u7ed3\u7b54\u6848\u5b8c\u6210~\")\n\n        if step == self.max_step:\n            logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5df2\u8fbe\u6700\u5927\u6b65\u6570{self.max_step}\")\n\n        logger.warning(\"\u7ae5\u53d1\u53d1\u7684Manus\u8d85\u7ea7\u52a9\u624b\u5df2\u5e2e\u4f60\u89e3\u51b3\u5f53\u524d\u95ee\u9898\uff0c\u6709\u5176\u4ed6\u95ee\u9898\u8fd8\u53ef\u95ee\u6211\u54e6~\")\n        logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5b8c\u6210\uff0c\u8bb0\u5fc6\u6e05\u7a7a~\")\n        self.memory_manager.clear()\n\n    # \u667a\u80fd\u4f53\u652f\u6301\u5bf9\u5de5\u5177\u91c7\u7528\u88c5\u9970\u5668\u7684\u5f62\u5f0f\u53d8\u4e3a\u6ce8\u518c\u5de5\u5177\n    def tool(self, func: Callable, tool_name: Optional[str] = None):\n        \"\"\"\u7c7b\u4f3cMCP\u534f\u8bae\uff0c\u7528\u88c5\u9970\u5668\u76f4\u63a5\u6ce8\u518c\u5de5\u5177\n\n        Args:\n            func (Callable): \u8981\u6ce8\u518c\u7684\u5de5\u5177\u51fd\u6570\n            tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u51fd\u6570\u540d\u4f5c\u4e3a\u5de5\u5177\u540d\u79f0\n        \"\"\"\n\n        def decorator(func: Callable):\n            self.add_tool(func, tool_name)\n            return func\n\n        return decorator\n\n    def add_tool(self,\n                 func: Callable,\n                 tool_name: Optional[str] = None) -&gt; None:\n        self.tool_manager.register_tool(func, tool_name)\n</code></pre>"},{"location":"mymanus/#mymanus.ToolCallingAgent.final_step_prompt","title":"final_step_prompt  <code>pydantic-field</code>","text":"Python<pre><code>final_step_prompt: str = FINAL_STEP_PROMPT\n</code></pre> <p>\u6700\u540e\u4e00\u6b65\u63d0\u793a</p>"},{"location":"mymanus/#mymanus.ToolCallingAgent.max_step","title":"max_step  <code>pydantic-field</code>","text":"Python<pre><code>max_step: int = 10\n</code></pre> <p>\u6700\u5927\u6b65\u9aa4</p>"},{"location":"mymanus/#mymanus.ToolCallingAgent.next_step_prompt","title":"next_step_prompt  <code>pydantic-field</code>","text":"Python<pre><code>next_step_prompt: str = NEXT_STEP_PROMPT\n</code></pre> <p>\u4e0b\u4e00\u6b65\u63d0\u793a</p>"},{"location":"mymanus/#mymanus.ToolCallingAgent.act","title":"act  <code>async</code>","text":"Python<pre><code>act(message: List[Dict]) -&gt; bool\n</code></pre> <p>\u8c03\u7528\u5bf9\u5e94\u5de5\u5177\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5c06\u8fd4\u56de\u7ed3\u6784\u901a\u8fc7assistant message\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e00\u65e6\u8c03\u7528\u5de5\u5177\u8fd8\u9700\u8981\u53cd\u9988assistant message\uff0c\u8981\u628a\u51fd\u6570\u8fd0\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u5927\u6a21\u578b\u505a\u4e0b\u4e00\u6b65\u7684\u8ba1\u5212</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u6d88\u606f\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>\u662f\u5426\u6267\u884c\u5b8c\u6240\u6709\u7684\u5de5\u5177</p> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def act(self, message: List[Dict]) -&gt; bool:\n    \"\"\"\u8c03\u7528\u5bf9\u5e94\u5de5\u5177\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u5c06\u8fd4\u56de\u7ed3\u6784\u901a\u8fc7assistant message\u8fd4\u56de\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e00\u65e6\u8c03\u7528\u5de5\u5177\u8fd8\u9700\u8981\u53cd\u9988assistant message\uff0c\u8981\u628a\u51fd\u6570\u8fd0\u884c\u7ed3\u679c\u8fd4\u56de\u7ed9\u5927\u6a21\u578b\u505a\u4e0b\u4e00\u6b65\u7684\u8ba1\u5212\n\n    Args:\n        message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n    Returns:\n        bool: \u662f\u5426\u6267\u884c\u5b8c\u6240\u6709\u7684\u5de5\u5177\n    \"\"\"\n\n    # \u6839\u636e\u8bb0\u5fc6\u8bfb\u53d6\u6700\u65b0\u7684\u56de\u590d\uff0c\u6839\u636etool_calls\u987a\u5e8f\u6267\u884c\u5de5\u5177\uff0c\u8fd4\u56de\u7684\u53ef\u80fd\u4e0d\u6b62\u4e00\u4e2a\u5de5\u5177\n    for tool_call in message[\"tool_calls\"]:\n\n        # \u62ff\u5230\u8c03\u7528\u5de5\u5177\u7684\u540d\u79f0\u3001\u5165\u53c2\u3001id\u3001index\n        tool_name = tool_call[\"function\"][\"name\"]\n        tool_arguments = tool_call[\"function\"][\"arguments\"]\n        tool_id = tool_call[\"id\"]\n\n        # \u6267\u884c\u5de5\u5177\n        logger.info(f\"\u8c03\u7528\u5de5\u5177\uff1a{tool_name}\uff0c\u5165\u53c2\uff1a{tool_arguments}\")\n        try:\n            # \u5982\u679ctool_arguments\u4e3a\u7a7a\u5b57\u5178\uff0c\u5219\u4e0d\u4f20\u5165\u53c2\u6570\n            if tool_arguments == \"{}\":\n                tool_result = await self.tool_manager.execute_tool(\n                    tool_name)\n            else:\n                # \u5c06tool_arguments\u8f6c\u6362\u4e3a\u5b57\u5178\n                tool_arguments = json.loads(tool_arguments)\n                tool_result = await self.tool_manager.execute_tool(\n                    tool_name, **tool_arguments)\n            logger.info(f\"\u5de5\u5177{tool_name}\u6267\u884c\u6210\u529f\")\n\n            # \u7136\u540e\u662f\u4e00\u4e2atool message\n            tool_message = {\n                \"role\": \"tool\",\n                \"content\": tool_result,\n                \"tool_call_id\": tool_id,\n            }\n            self.memory_manager.add_message(tool_message)\n\n            if tool_call[\"function\"][\"name\"] == \"terminate\":\n                logger.warning(f\"\u667a\u80fd\u4f53\u8ba4\u4e3a\u4efb\u52a1\u5b8c\u6210\uff0c\u7ec8\u6b62\u5de5\u5177\u8c03\u7528\")\n                return True\n\n        except Exception as e:\n            logger.error(f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u9519\u8bef\u4fe1\u606f\uff1a{e}\")\n            # \u5c06\u9519\u8bef\u4fe1\u606f\u544a\u77e5\u5927\u6a21\u578b\n            assistant_message = {\n                \"content\": f\"\u5de5\u5177{tool_name}\u6267\u884c\u5931\u8d25\uff0c\u8003\u8651\u8c03\u7528\u5176\u4ed6\u5de5\u5177\",\n                \"refusal\": None,\n                \"role\": \"assistant\",\n                \"audio\": None,\n                \"function_call\": None,\n                \"tool_calls\": None,\n            }\n            self.memory_manager.add_message(assistant_message)\n    # \u8fd4\u56de\u7ed3\u679c\n    return False\n</code></pre>"},{"location":"mymanus/#mymanus.ToolCallingAgent.run","title":"run  <code>async</code>","text":"Python<pre><code>run(message: List[Dict])\n</code></pre> <p>\u8fd0\u884c\u5b8c\u6574\u8f6e\u6570\u7684react\u8fc7\u7a0b</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u7528\u6237\u7684\u4e00\u53e5\u8bddquery</p> required Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def run(self, message: List[Dict]):\n    \"\"\"\u8fd0\u884c\u5b8c\u6574\u8f6e\u6570\u7684react\u8fc7\u7a0b\n\n    Args:\n        message (List[Dict]): \u7528\u6237\u7684\u4e00\u53e5\u8bddquery\n    \"\"\"\n\n    # \u7528\u6237\u95ee\u9898\u672c\u8eab\u4e5f\u8981\u52a0\u5230\u8bb0\u5fc6\u91cc\u9762\n    self.memory_manager.add_message(message)\n    step = 0\n    while step &lt; self.max_step:\n        logger.warning(f\"\u6b63\u5728\u6267\u884c\u7b2c{step+1}\u6b65\u2026\u2026\")\n        # \u8f93\u5165\u5168\u91cf\u7684message\n        final_step = await self.run_step(self.memory_manager.get_memory())\n        if final_step:\n            break\n        step += 1\n\n    # \u6700\u540e\u4e00\u6b65\u8981\u7efc\u5408\u9664\u4e86\u6700\u540e\u4e00\u8f6e\u4fe1\u606f\u7ed9\u7528\u6237\u4e00\u4e2a\u603b\u7ed3\u6027\u7684\u56de\u590d\uff0c\u8fd8\u9700\u8981\u548c\u5927\u6a21\u578b\u505a\u4e00\u6b21\u5bf9\u8bdd\n    if final_step:\n\n        final_message = {\"role\": \"user\", \"content\": self.final_step_prompt}\n        # \u6ce8\u610f\u5728\u8c03\u7528terminate\u5de5\u5177\u7684\u540c\u65f6\u8fd8\u53ef\u80fd\u6709\u8f93\u51fa\uff0c\u5f97\u628aterminate\u5f53\u6210\u4e00\u4e2a\u666e\u901a\u5de5\u5177\u5bf9\u5f85\n        # \u628afinal_message\u52a0\u5165\u5230memory\u5f53\u4e2d\n        self.memory_manager.add_message(final_message)\n\n        logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u603b\u7ed3\u7b54\u6848\u2026\u2026\")\n        # \u8fd9\u91cc\u6709\u4e00\u4e2a\u7279\u522b\u5751\u7684\u5730\u65b9\uff0c\u5c31\u662ftools\u5fc5\u987b\u5168\u7a0b\u4fdd\u6301\u4e00\u81f4\uff0c\u5426\u5219\u5927\u6a21\u578b\u81ea\u52a8\u8fdb\u5165\u65b0\u7684\u95ee\u7b54\uff0c\u65e0\u6cd5\u7ed3\u5408\u4e0a\u4e0b\u6587\u4fe1\u606f\u5206\u6790\u4e86\n        final_response = await self.llm.chat(\n            messages=self.memory_manager.get_memory(),\n            tool_choice=\"none\",\n            tools=self.tool_manager.get_tool_schema_list())\n        self.memory_manager.add_message(final_response.model_dump())\n        # \u7a7a\u4e00\u884c\n        print()\n        logger.warning(f\"\u667a\u80fd\u4f53\u603b\u7ed3\u7b54\u6848\u5b8c\u6210~\")\n\n    if step == self.max_step:\n        logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5df2\u8fbe\u6700\u5927\u6b65\u6570{self.max_step}\")\n\n    logger.warning(\"\u7ae5\u53d1\u53d1\u7684Manus\u8d85\u7ea7\u52a9\u624b\u5df2\u5e2e\u4f60\u89e3\u51b3\u5f53\u524d\u95ee\u9898\uff0c\u6709\u5176\u4ed6\u95ee\u9898\u8fd8\u53ef\u95ee\u6211\u54e6~\")\n    logger.warning(f\"\u667a\u80fd\u4f53\u6267\u884c\u5b8c\u6210\uff0c\u8bb0\u5fc6\u6e05\u7a7a~\")\n    self.memory_manager.clear()\n</code></pre>"},{"location":"mymanus/#mymanus.ToolCallingAgent.run_step","title":"run_step  <code>async</code>","text":"Python<pre><code>run_step(message: List[Dict])\n</code></pre> <p>\u8fd0\u884c\u4e00\u4e2areact\u6b65\u9aa4\uff0c\u5305\u62ec\u4e00\u6b21think\u548c\u4e00\u6b21act</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u6d88\u606f\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>\u662f\u5426\u662f\u6700\u540e\u4e00\u6b65\uff0c\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6</p> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def run_step(self, message: List[Dict]):\n    \"\"\"\u8fd0\u884c\u4e00\u4e2areact\u6b65\u9aa4\uff0c\u5305\u62ec\u4e00\u6b21think\u548c\u4e00\u6b21act\n\n    Args:\n        message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n    Returns:\n        bool: \u662f\u5426\u662f\u6700\u540e\u4e00\u6b65\uff0c\u8fbe\u5230\u7ec8\u6b62\u6761\u4ef6\n    \"\"\"\n\n    # \u601d\u8003\n    logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u601d\u8003\u2026\u2026\")\n    should_act = await self.think(message)\n    if should_act:\n        # \u884c\u52a8\n        # \u83b7\u53d6\u6700\u65b0\u7684message\n        logger.warning(f\"\u667a\u80fd\u4f53\u6b63\u5728\u884c\u52a8\u2026\u2026\")\n        current_message = self.memory_manager.get_memory()[-1]\n        should_terminate = await self.act(current_message)\n        if should_terminate:\n            return True\n        else:\n            return False\n    else:\n        return False\n</code></pre>"},{"location":"mymanus/#mymanus.ToolCallingAgent.think","title":"think  <code>async</code>","text":"Python<pre><code>think(message: List[Dict]) -&gt; bool\n</code></pre> <p>\u4f7f\u7528\u5927\u6a21\u578b\u8fdb\u884c\u601d\u8003\uff0c\u8fd4\u56de\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>List[Dict]</code> <p>\u6d88\u606f\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177</p> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>async def think(self, message: List[Dict]) -&gt; bool:\n    \"\"\"\u4f7f\u7528\u5927\u6a21\u578b\u8fdb\u884c\u601d\u8003\uff0c\u8fd4\u56de\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n\n    Args:\n        message (List[Dict]): \u6d88\u606f\u5217\u8868\n\n    Returns:\n        bool: \u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n    \"\"\"\n    # \u6dfb\u52a0\u7ec8\u6b62\u63d0\u793a\n    message.append({\"role\": \"user\", \"content\": self.next_step_prompt})\n    response = await self.llm.chat(\n        messages=message, tools=self.tool_manager.get_tool_schema_list())\n\n    # \u56de\u590d\u5185\u5bb9\u5168\u90e8\u52a0\u5165\u8bb0\u5fc6\u6a21\u5757\uff0c\u52a0\u5165\u7684\u5f97\u662f\u5b57\u5178\n    self.memory_manager.add_message(response.model_dump())\n    # \u6253\u5370\u56de\u590d\u5185\u5bb9\uff0c\u6d41\u5f0f\u8f93\u51fa\u4f1a\u81ea\u52a8\u6253\u5370\uff0c\u4e0d\u5fc5\u8981\u91cd\u590d\u6253\u5370\n    if response.content and not self.llm.stream:\n        logger.info(f\"\u667a\u80fd\u4f53\u56de\u590d\uff1a{response.content}\")\n    # \u5224\u65ad\u662f\u5426\u9700\u8981\u4f7f\u7528\u5de5\u5177\n    if response.tool_calls:\n        return True\n    else:\n        return False\n</code></pre>"},{"location":"mymanus/#mymanus.ToolCallingAgent.tool","title":"tool","text":"Python<pre><code>tool(func: Callable, tool_name: Optional[str] = None)\n</code></pre> <p>\u7c7b\u4f3cMCP\u534f\u8bae\uff0c\u7528\u88c5\u9970\u5668\u76f4\u63a5\u6ce8\u518c\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>Callable</code> <p>\u8981\u6ce8\u518c\u7684\u5de5\u5177\u51fd\u6570</p> required <code>tool_name</code> <code>Optional[str]</code> <p>\u5de5\u5177\u540d\u79f0\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u51fd\u6570\u540d\u4f5c\u4e3a\u5de5\u5177\u540d\u79f0</p> <code>None</code> Source code in <code>src/mymanus/agent/agent.py</code> Python<pre><code>def tool(self, func: Callable, tool_name: Optional[str] = None):\n    \"\"\"\u7c7b\u4f3cMCP\u534f\u8bae\uff0c\u7528\u88c5\u9970\u5668\u76f4\u63a5\u6ce8\u518c\u5de5\u5177\n\n    Args:\n        func (Callable): \u8981\u6ce8\u518c\u7684\u5de5\u5177\u51fd\u6570\n        tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u5982\u679c\u4e3aNone\uff0c\u5219\u4f7f\u7528\u51fd\u6570\u540d\u4f5c\u4e3a\u5de5\u5177\u540d\u79f0\n    \"\"\"\n\n    def decorator(func: Callable):\n        self.add_tool(func, tool_name)\n        return func\n\n    return decorator\n</code></pre>"},{"location":"mymanus/#mymanus.ToolManager","title":"ToolManager","text":"<p>\u5de5\u5177\u7ba1\u7406\u7c7b\uff0c\u7ba1\u7406\u6240\u6709\u7684\u5de5\u5177\uff0c\u671f\u671b\u5177\u5907\u7684\u529f\u80fd\uff1a 1. \u5de5\u5177\u6ce8\u518c\uff1a\u8ba9\u5de5\u5177\u7ba1\u7406\u5668\u611f\u77e5\u5230\uff0c\u5305\u62ec\u751f\u6210\u5bf9\u5e94\u7684schema\u4fdd\u5b58\u8d77\u6765 2. \u5de5\u5177\u6267\u884c\uff1a\u6267\u884c\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c 3. \u5de5\u5177\u5220\u9664\uff1a\u5220\u9664\u5de5\u5177 4. \u5de5\u5177\u5217\u8868\uff1a\u83b7\u53d6\u6240\u6709\u5de5\u5177\u5217\u8868</p> <p>Parameters:</p> Name Type Description Default <code>tools</code> <code>Dict[str, BaseTool]</code> <p>\u5de5\u5177\u5b57\u5178\uff0ckey\u662f\u5de5\u5177\u540d\u79f0\uff0cvalue\u662f\u5de5\u5177\u5b9e\u4f8b</p> required Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>class ToolManager:\n    \"\"\"\u5de5\u5177\u7ba1\u7406\u7c7b\uff0c\u7ba1\u7406\u6240\u6709\u7684\u5de5\u5177\uff0c\u671f\u671b\u5177\u5907\u7684\u529f\u80fd\uff1a\n    1. \u5de5\u5177\u6ce8\u518c\uff1a\u8ba9\u5de5\u5177\u7ba1\u7406\u5668\u611f\u77e5\u5230\uff0c\u5305\u62ec\u751f\u6210\u5bf9\u5e94\u7684schema\u4fdd\u5b58\u8d77\u6765\n    2. \u5de5\u5177\u6267\u884c\uff1a\u6267\u884c\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\n    3. \u5de5\u5177\u5220\u9664\uff1a\u5220\u9664\u5de5\u5177\n    4. \u5de5\u5177\u5217\u8868\uff1a\u83b7\u53d6\u6240\u6709\u5de5\u5177\u5217\u8868\n\n    Args:\n        tools (Dict[str, BaseTool]): \u5de5\u5177\u5b57\u5178\uff0ckey\u662f\u5de5\u5177\u540d\u79f0\uff0cvalue\u662f\u5de5\u5177\u5b9e\u4f8b\n    \"\"\"\n\n    # \u521d\u59cb\u5316\u7c7b\n    def __init__(self):\n        self.tools: Dict[str, BaseTool] = {}  # \u6bcf\u4e00\u4e2a\u5de5\u5177\u90fd\u662fBaseTool\u5b9e\u4f8b\n\n    # \u5de5\u5177\u6ce8\u518c\uff1a\u8ba9\u5de5\u5177\u7ba1\u7406\u5668\u611f\u77e5\u5230\n    def register_tool(self, tool: Any, tool_name: Optional[str] = None):\n        \"\"\"\u6ce8\u518c\u5de5\u5177\n\n        Args:\n            tool (Any): \u5de5\u5177\uff0c\u5f62\u5f0f\u4e0d\u9650\n            tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f\u51fd\u6570\u540d\n        \"\"\"\n        # \u540e\u9762\u53ef\u80fd\u4f1a\u589e\u52a0\u5de5\u5177\u662f\u7c7b\u7684\u53ef\u80fd\u6027\uff0c\u73b0\u5728\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\n        # \u751f\u6210\u5de5\u5177\u7684\u540d\u79f0\uff0c\u6ca1\u6709\u540d\u79f0\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u7684\u540d\u79f0\n        if tool_name is None:\n            tool_name = tool.__name__\n        elif tool_name in self.tools:\n            warnings.warn(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u5df2\u5b58\u5728\uff0c\u5c06\u8986\u76d6\u539f\u6709\u5de5\u5177\")\n\n        # \u751f\u6210\u5de5\u5177\u7684\u5b9e\u4f8b\n        tool = FunctionTool(tool=tool, tool_name=tool_name)\n        self.tools[tool_name] = tool\n\n    # \u5de5\u5177\u6267\u884c\uff1a\u6267\u884c\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\n    def execute_tool(self, tool_name: str, **kwargs) -&gt; Any:\n        \"\"\"\u6267\u884c\u5de5\u5177\n\n        Args:\n            tool_name (str): \u5de5\u5177\u540d\u79f0\n            **kwargs: \u5de5\u5177\u5165\u53c2\n\n        Returns:\n            (Any): \u5de5\u5177\u8fd4\u56de\u7ed3\u679c\n        \"\"\"\n        if tool_name not in self.tools:\n            raise ValueError(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u4e0d\u5b58\u5728\")\n\n        return self.tools[tool_name].execute(**kwargs)\n\n    # \u5de5\u5177\u5220\u9664\uff1a\u5220\u9664\u5de5\u5177\n    def delete_tool(self, tool_name: str) -&gt; bool:\n        \"\"\"\u5220\u9664\u5de5\u5177\n\n        Args:\n            tool_name (str): \u5de5\u5177\u540d\u79f0\n\n        Returns:\n            (bool): \u662f\u5426\u5220\u9664\u6210\u529f\n        \"\"\"\n        if tool_name in self.tools:\n            del self.tools[tool_name]\n            return True\n\n        return False\n\n    # \u5de5\u5177\u5217\u8868\uff1a\u83b7\u53d6\u6240\u6709\u5de5\u5177\u5217\u8868\n    def get_tool_list(self) -&gt; List[FunctionTool]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u5217\u8868\n\n        Returns:\n            (List[FunctionTool]): \u5de5\u5177\u5217\u8868\n        \"\"\"\n        return list(self.tools.values())\n\n    # \u83b7\u53d6\u6240\u6709\u7684schema\n    def get_tool_schema_list(self) -&gt; List[Dict]:\n        \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\u7684schema\n\n        Returns:\n            (List[Dict]): \u5de5\u5177schema\u5217\u8868\n        \"\"\"\n        return [tool.tool_schema for tool in self.tools.values()]\n</code></pre>"},{"location":"mymanus/#mymanus.ToolManager.delete_tool","title":"delete_tool","text":"Python<pre><code>delete_tool(tool_name: str) -&gt; bool\n</code></pre> <p>\u5220\u9664\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>\u5de5\u5177\u540d\u79f0</p> required <p>Returns:</p> Type Description <code>bool</code> <p>\u662f\u5426\u5220\u9664\u6210\u529f</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def delete_tool(self, tool_name: str) -&gt; bool:\n    \"\"\"\u5220\u9664\u5de5\u5177\n\n    Args:\n        tool_name (str): \u5de5\u5177\u540d\u79f0\n\n    Returns:\n        (bool): \u662f\u5426\u5220\u9664\u6210\u529f\n    \"\"\"\n    if tool_name in self.tools:\n        del self.tools[tool_name]\n        return True\n\n    return False\n</code></pre>"},{"location":"mymanus/#mymanus.ToolManager.execute_tool","title":"execute_tool","text":"Python<pre><code>execute_tool(tool_name: str, **kwargs) -&gt; Any\n</code></pre> <p>\u6267\u884c\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>\u5de5\u5177\u540d\u79f0</p> required <code>**kwargs</code> <p>\u5de5\u5177\u5165\u53c2</p> <code>{}</code> <p>Returns:</p> Type Description <code>Any</code> <p>\u5de5\u5177\u8fd4\u56de\u7ed3\u679c</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def execute_tool(self, tool_name: str, **kwargs) -&gt; Any:\n    \"\"\"\u6267\u884c\u5de5\u5177\n\n    Args:\n        tool_name (str): \u5de5\u5177\u540d\u79f0\n        **kwargs: \u5de5\u5177\u5165\u53c2\n\n    Returns:\n        (Any): \u5de5\u5177\u8fd4\u56de\u7ed3\u679c\n    \"\"\"\n    if tool_name not in self.tools:\n        raise ValueError(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u4e0d\u5b58\u5728\")\n\n    return self.tools[tool_name].execute(**kwargs)\n</code></pre>"},{"location":"mymanus/#mymanus.ToolManager.get_tool_list","title":"get_tool_list","text":"Python<pre><code>get_tool_list() -&gt; List[FunctionTool]\n</code></pre> <p>\u83b7\u53d6\u6240\u6709\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u5217\u8868</p> <p>Returns:</p> Type Description <code>List[FunctionTool]</code> <p>\u5de5\u5177\u5217\u8868</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def get_tool_list(self) -&gt; List[FunctionTool]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\uff0c\u5e76\u8fd4\u56de\u5217\u8868\n\n    Returns:\n        (List[FunctionTool]): \u5de5\u5177\u5217\u8868\n    \"\"\"\n    return list(self.tools.values())\n</code></pre>"},{"location":"mymanus/#mymanus.ToolManager.get_tool_schema_list","title":"get_tool_schema_list","text":"Python<pre><code>get_tool_schema_list() -&gt; List[Dict]\n</code></pre> <p>\u83b7\u53d6\u6240\u6709\u5de5\u5177\u7684schema</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>\u5de5\u5177schema\u5217\u8868</p> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def get_tool_schema_list(self) -&gt; List[Dict]:\n    \"\"\"\u83b7\u53d6\u6240\u6709\u5de5\u5177\u7684schema\n\n    Returns:\n        (List[Dict]): \u5de5\u5177schema\u5217\u8868\n    \"\"\"\n    return [tool.tool_schema for tool in self.tools.values()]\n</code></pre>"},{"location":"mymanus/#mymanus.ToolManager.register_tool","title":"register_tool","text":"Python<pre><code>register_tool(tool: Any, tool_name: Optional[str] = None)\n</code></pre> <p>\u6ce8\u518c\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>Any</code> <p>\u5de5\u5177\uff0c\u5f62\u5f0f\u4e0d\u9650</p> required <code>tool_name</code> <code>Optional[str]</code> <p>\u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f\u51fd\u6570\u540d</p> <code>None</code> Source code in <code>src/mymanus/agent/tool_manager.py</code> Python<pre><code>def register_tool(self, tool: Any, tool_name: Optional[str] = None):\n    \"\"\"\u6ce8\u518c\u5de5\u5177\n\n    Args:\n        tool (Any): \u5de5\u5177\uff0c\u5f62\u5f0f\u4e0d\u9650\n        tool_name (Optional[str]): \u5de5\u5177\u540d\u79f0\uff0c\u9ed8\u8ba4\u662f\u51fd\u6570\u540d\n    \"\"\"\n    # \u540e\u9762\u53ef\u80fd\u4f1a\u589e\u52a0\u5de5\u5177\u662f\u7c7b\u7684\u53ef\u80fd\u6027\uff0c\u73b0\u5728\u9ed8\u8ba4\u5c31\u662f\u4e00\u4e2a\u51fd\u6570\n    # \u751f\u6210\u5de5\u5177\u7684\u540d\u79f0\uff0c\u6ca1\u6709\u540d\u79f0\u7ed9\u4e00\u4e2a\u9ed8\u8ba4\u7684\u540d\u79f0\n    if tool_name is None:\n        tool_name = tool.__name__\n    elif tool_name in self.tools:\n        warnings.warn(f\"\u5de5\u5177\u540d\u79f0{tool_name}\u5df2\u5b58\u5728\uff0c\u5c06\u8986\u76d6\u539f\u6709\u5de5\u5177\")\n\n    # \u751f\u6210\u5de5\u5177\u7684\u5b9e\u4f8b\n    tool = FunctionTool(tool=tool, tool_name=tool_name)\n    self.tools[tool_name] = tool\n</code></pre>"},{"location":"mymanus/#mymanus.add","title":"add  <code>async</code>","text":"Python<pre><code>add(numbers: List[float]) -&gt; float\n</code></pre> <p>\u5bf9\u4efb\u610f\u4e2a\u6570\u7684\u6570\u5b57\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97</p> <p>Parameters:</p> Name Type Description Default <code>numbers</code> <code>List[float]</code> <p>\u52a0\u6570\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>\u548c</p> Source code in <code>src/mymanus/tool/math.py</code> Python<pre><code>async def add(numbers: List[float]) -&gt; float:\n    \"\"\"\u5bf9\u4efb\u610f\u4e2a\u6570\u7684\u6570\u5b57\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\n\n    Args:\n        numbers (List[float]): \u52a0\u6570\u5217\u8868\n\n    Returns:\n        float: \u548c\n    \"\"\"\n\n    # \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    return f\"\u76f8\u52a0\u7684\u7ed3\u679c\u662f\uff1a{sum(numbers)}\"\n</code></pre>"},{"location":"mymanus/#mymanus.baidu_search","title":"baidu_search  <code>async</code>","text":"Python<pre><code>baidu_search(query: str, num_results: Optional[int] = 10) -&gt; str\n</code></pre> <p>\u767e\u5ea6\u641c\u7d22\u5de5\u5177</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> <p>\u641c\u7d22\u5173\u952e\u8bcd</p> required <code>num_results</code> <code>int</code> <p>\u641c\u7d22\u7ed3\u679c\u6570\u91cf\uff0c\u9ed8\u8ba410\u6761.</p> <code>10</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u683c\u5f0f\u5316\u7684\u641c\u7d22\u7ed3\u679c</p> Source code in <code>src/mymanus/tool/search.py</code> Python<pre><code>async def baidu_search(query: str, num_results: Optional[int] = 10) -&gt; str:\n    \"\"\"\u767e\u5ea6\u641c\u7d22\u5de5\u5177\n\n    Args:\n        query (str): \u641c\u7d22\u5173\u952e\u8bcd\n        num_results (int, optional): \u641c\u7d22\u7ed3\u679c\u6570\u91cf\uff0c\u9ed8\u8ba410\u6761.\n\n    Returns:\n        str: \u683c\u5f0f\u5316\u7684\u641c\u7d22\u7ed3\u679c\n    \"\"\"\n    results = search(query, num_results=num_results)\n\n    # \u683c\u5f0f\u5316\u641c\u7d22\u7ed3\u679c\n    formatted_results = []\n    for i, result in enumerate(results, 1):\n        title = result.get('title', '\u65e0\u6807\u9898')\n        abstract = result.get('abstract', '\u65e0\u6458\u8981')\n        url = result.get('url', '\u65e0\u94fe\u63a5')\n\n        # \u6e05\u7406\u6458\u8981\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26\u548c\u591a\u4f59\u7a7a\u683c\n        abstract = abstract.replace('\\n', ' ').replace('\\ue62b', '').replace(\n            '\\ue680', '').replace('\\ue67d', '').strip()\n\n        # \u6784\u5efa\u683c\u5f0f\u5316\u7684\u7ed3\u679c\n        formatted_result = f\"\"\"\n                            \u7b2c{i}\u6761\u641c\u7d22\u7ed3\u679c\uff1a\n                            \u6807\u9898\uff1a{title}\n                            \u94fe\u63a5\uff1a{url}\n                            \u6458\u8981\uff1a{abstract}\n                            \"\"\"\n        formatted_results.append(formatted_result)\n\n    # \u5c06\u6240\u6709\u7ed3\u679c\u5408\u5e76\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\n    final_result = \"\u641c\u7d22\u7ed3\u679c\uff1a\\n\" + \"\\n\".join(formatted_results)\n    return final_result\n</code></pre>"},{"location":"mymanus/#mymanus.get_current_time","title":"get_current_time  <code>async</code>","text":"Python<pre><code>get_current_time() -&gt; str\n</code></pre> <p>\u67e5\u8be2\u5f53\u524d\u65f6\u95f4\u7684\u5de5\u5177\u3002\u8fd4\u56de\u7ed3\u679c\u793a\u4f8b\uff1a\u201c\u5f53\u524d\u65f6\u95f4\uff1a2024-04-15 17:15:18\u3002\u201c</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u5f53\u524d\u65f6\u95f4</p> Source code in <code>src/mymanus/tool/general.py</code> Python<pre><code>async def get_current_time() -&gt; str:\n    \"\"\"\u67e5\u8be2\u5f53\u524d\u65f6\u95f4\u7684\u5de5\u5177\u3002\u8fd4\u56de\u7ed3\u679c\u793a\u4f8b\uff1a\u201c\u5f53\u524d\u65f6\u95f4\uff1a2024-04-15 17:15:18\u3002\u201c\n\n    Returns:\n        str: \u5f53\u524d\u65f6\u95f4\n    \"\"\"\n\n    # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4\n    current_datetime = datetime.now()\n    # \u683c\u5f0f\u5316\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4\n    formatted_time = current_datetime.strftime('%Y-%m-%d %H:%M:%S')\n    # \u8fd4\u56de\u683c\u5f0f\u5316\u540e\u7684\u5f53\u524d\u65f6\u95f4\n    return f\"\u5f53\u524d\u65f6\u95f4\uff1a{formatted_time}\u3002\"\n</code></pre>"},{"location":"tool/","title":"Tool","text":""},{"location":"tool/#mymanus.tool.general","title":"mymanus.tool.general","text":""},{"location":"tool/#mymanus.tool.general.get_current_time","title":"get_current_time  <code>async</code>","text":"Python<pre><code>get_current_time() -&gt; str\n</code></pre> <p>\u67e5\u8be2\u5f53\u524d\u65f6\u95f4\u7684\u5de5\u5177\u3002\u8fd4\u56de\u7ed3\u679c\u793a\u4f8b\uff1a\u201c\u5f53\u524d\u65f6\u95f4\uff1a2024-04-15 17:15:18\u3002\u201c</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>\u5f53\u524d\u65f6\u95f4</p> Source code in <code>src/mymanus/tool/general.py</code> Python<pre><code>async def get_current_time() -&gt; str:\n    \"\"\"\u67e5\u8be2\u5f53\u524d\u65f6\u95f4\u7684\u5de5\u5177\u3002\u8fd4\u56de\u7ed3\u679c\u793a\u4f8b\uff1a\u201c\u5f53\u524d\u65f6\u95f4\uff1a2024-04-15 17:15:18\u3002\u201c\n\n    Returns:\n        str: \u5f53\u524d\u65f6\u95f4\n    \"\"\"\n\n    # \u83b7\u53d6\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4\n    current_datetime = datetime.now()\n    # \u683c\u5f0f\u5316\u5f53\u524d\u65e5\u671f\u548c\u65f6\u95f4\n    formatted_time = current_datetime.strftime('%Y-%m-%d %H:%M:%S')\n    # \u8fd4\u56de\u683c\u5f0f\u5316\u540e\u7684\u5f53\u524d\u65f6\u95f4\n    return f\"\u5f53\u524d\u65f6\u95f4\uff1a{formatted_time}\u3002\"\n</code></pre>"},{"location":"tool/#mymanus.tool.math","title":"mymanus.tool.math","text":""},{"location":"tool/#mymanus.tool.math.add","title":"add  <code>async</code>","text":"Python<pre><code>add(numbers: List[float]) -&gt; float\n</code></pre> <p>\u5bf9\u4efb\u610f\u4e2a\u6570\u7684\u6570\u5b57\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97</p> <p>Parameters:</p> Name Type Description Default <code>numbers</code> <code>List[float]</code> <p>\u52a0\u6570\u5217\u8868</p> required <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>\u548c</p> Source code in <code>src/mymanus/tool/math.py</code> Python<pre><code>async def add(numbers: List[float]) -&gt; float:\n    \"\"\"\u5bf9\u4efb\u610f\u4e2a\u6570\u7684\u6570\u5b57\u8fdb\u884c\u52a0\u6cd5\u8fd0\u7b97\n\n    Args:\n        numbers (List[float]): \u52a0\u6570\u5217\u8868\n\n    Returns:\n        float: \u548c\n    \"\"\"\n\n    # \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    return f\"\u76f8\u52a0\u7684\u7ed3\u679c\u662f\uff1a{sum(numbers)}\"\n</code></pre>"},{"location":"tool/#mymanus.tool.terminate","title":"mymanus.tool.terminate","text":""},{"location":"tool/#mymanus.tool.terminate.terminate","title":"terminate  <code>async</code>","text":"Python<pre><code>terminate()\n</code></pre> <p>\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5de5\u5177\uff0c\u8fd9\u4e2a\u5de5\u5177\u7684\u4f5c\u7528\u5c31\u662f\u4e00\u65e6\u8c03\u7528\uff0c\u5c31\u610f\u5473\u7740\u667a\u80fd\u4f53\u5df2\u7ecf\u89e3\u51b3\u4e86\u6240\u6709\u7684\u95ee\u9898\uff0c\u8fd4\u56de\u4e00\u4e2a\u56fa\u5b9a\u56de\u7b54</p> <p>Returns:</p> Name Type Description <code>str</code> <p>\u56fa\u5b9a\u56de\u7b54</p> Source code in <code>src/mymanus/tool/terminate.py</code> Python<pre><code>async def terminate():\n    \"\"\"\u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u5de5\u5177\uff0c\u8fd9\u4e2a\u5de5\u5177\u7684\u4f5c\u7528\u5c31\u662f\u4e00\u65e6\u8c03\u7528\uff0c\u5c31\u610f\u5473\u7740\u667a\u80fd\u4f53\u5df2\u7ecf\u89e3\u51b3\u4e86\u6240\u6709\u7684\u95ee\u9898\uff0c\u8fd4\u56de\u4e00\u4e2a\u56fa\u5b9a\u56de\u7b54\n\n    Returns:\n        str: \u56fa\u5b9a\u56de\u7b54\n    \"\"\"\n    return f\"\u5f00\u59cb\u603b\u7ed3\u7528\u6237\u7ed3\u679c\"\n</code></pre>"}]}